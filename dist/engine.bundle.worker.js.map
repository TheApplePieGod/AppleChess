{"version":3,"sources":["webpack://bandersnatch/./src/definitions.ts","webpack://bandersnatch/./src/engine/engine.ts","webpack://bandersnatch/./node_modules/big-integer/BigInteger.js","webpack://bandersnatch/webpack/bootstrap","webpack://bandersnatch/webpack/runtime/node module decorator","webpack://bandersnatch/webpack/startup"],"names":["Piece","Sounds","EvalCommands","EngineCommands","Value","getPieceName","piece","Pawn_W","Pawn_B","Knight_W","Knight_B","Bishop_W","Bishop_B","Rook_W","Rook_B","Queen_W","Queen_B","King_W","King_B","getPieceNameShort","notationToIndex","rank","file","charCodeAt","indexToNotation","index","y","Math","floor","x","String","fromCharCode","pawnSquareTable","knightSquareTable","bishopSquareTable","rookSquareTable","queenSquareTable","kingMiddleGameSquareTable","kingEndGameSquareTable","ctx","self","SavedEvalTypes","CastleStatus","Engine","boardSize","board","boardDelta","boardHash","BigInt","zobristHashTable","savedEvaluations","evalBestMove","from","to","data","score","evalBestMoveThisIteration","movesFoundThisTurn","movesFoundThisIteration","repetitionHistory","searchStartTime","searchMaxTime","pieceCapturedThisTurn","castledThisTurn","timeTakenLastTurn","depthSearchedThisTurn","pieceLocations","moveCount","moveRepCount","pinnedPieces","historicalBoards","historicalIndex","whiteTurn","castleStatus","enPassantSquare","allValidMoves","fenToPieceDict","startingMaterialWithoutPawns","Bishop","Knight","Rook","Queen","startingMaterial","Pawn","this","endgameMaterialThreshold","createHistoricalBoard","newPieceLocations","i","length","useHistoricalBoard","historicalBoard","hashBoard","getAllValidMoves","stepBack","abs","stepForward","undoMove","pop","hash","Empty","j","WhiteKing","WhiteQueen","BlackKing","BlackQueen","parseFEN","fenString","push","fields","split","ranks","boardIndex","r","terms","t","numberVal","parseInt","isNaN","includes","traceValidSquares","slopeX","slopeY","white","onlyEmpty","updatePins","inArray","currentIndex","xyMax","obstructed","obstructedIndex","getValidSquares","attackOnly","isWhite","upOne","upTwo","upLeft","upRight","downOne","downTwo","downLeft","downRight","leftOne","rightOne","upLeftOne","upLeftTwo","upRightOne","upRightTwo","bottomLeftOne","bottomLeftTwo","bottomRightOne","bottomRightTwo","getAttackedSquares","toIndex","attackedSquares","endIndex","updatePinnedSquares","tempArray","getValidCastleSquares","traced","isInCheck","attacked","isInCheckAttackedSquares","capturesOnly","baseAttackedSquares","allValid","inCheck","startIndex","location","valid","isPinned","validLength","k","pieceBackup","backup2","finishTurn","forceMakeMove","fromIndex","move","movingPiece","capturedPiece","target","promoted","splice","indexOf","unmakeMove","deltas","foundIndex","updateCastleStatus","castled","updateHash","delta","oldEnPassant","oldCastleStatus","newHash","pos","newPiece","getPieceCount","pieceCount","checkForDraw","count","predictAndOrderMoves","moves","movesLength","capturingPiece","promoting","getPieceValue","sort","a","b","readSquareTableValue","table","evaluateSquareTable","value","positions","evaluateSquareTables","endgameWeight","kingMiddlegameValue","evaluateEndgamePosition","opponentKingX","opponentKingY","distance","evaluatePawnStructure","pawnList","protectedLeft","protectedRight","evaluate","whiteMaterial","countMaterial","blackMaterial","whiteMaterialWithoutPawns","blackMaterialWithoutPawns","whiteEndgameWeight","min","blackEndgameWeight","whiteEval","blackEval","whiteX","whiteY","blackX","blackY","distanceBetween","evaluation","findBestMoveWithIterativeDeepening","Date","now","lastCompletedDepth","performance","findBestMove","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","postMessage","command","ReceiveCurrentEval","eval","canCancel","depth","offset","alpha","beta","max","hashString","toString","savedEval","finalScore","shouldReturn","type","Exact","Alpha","Beta","bestMove","quiescenceSearch","validMoves","startingHash","bestMoveForThisPosition","savingType","totalMoves","capture","calculateAllPossibleMoves","randomBotMove","moveIndex","random","evalBotMove","startTime","lastMove","console","log","endTime","evalBotMoveIterative","engine","attemptMove","some","e","maxVal","pow","minus","randBetween","castleValues","enPassantSquares","addEventListener","RetrieveBoard","AttemptMove","result","undefined","captured","draw","HistoryGoBack","HistoryGoForward","UndoMove","BotBestMove","timeTaken","depthSearched","movesFound","BotBestMoveIterative","RetrievePieceLocations","locations","BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","Integer","v","radix","alphabet","caseSensitive","parseValue","parseBase","BigInteger","sign","isSmall","SmallInteger","NativeBigInt","isPrecise","n","arrayToSmall","arr","trim","compareAbs","createArray","Array","truncate","ceil","add","sum","l_a","l_b","carry","base","addAny","addSmall","l","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","concat","multiplyKaratsuba","slice","d","c","ac","bd","abcd","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","Error","negate","comparison","quotientDigit","shift","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","unshift","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","prototype","Object","create","plus","subtractAny","small","multiply","l1","l2","times","_multiplyBySmall","divmod","over","_0","_1","_2","isNegative","exp","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","toJSNumber","isProbablePrime","iterations","rng","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","tmp","p","gcd","text","toLowerCase","absBase","alphabetValues","digits","start","parseBaseFromArray","val","toBase","apply","map","valueOf","neg","out","left","digit","toBaseString","stringify","join","parseStringValue","decimalPlace","test","parseNumberValue","toArray","str","toJSON","minusOne","lcm","isInstance","usedRNG","low","range","restricted","top","fromArray","module","hasOwnProperty","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","call","nmd","paths","children"],"mappings":"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","file":"engine.bundle.worker.js","sourcesContent":["export enum Piece {\r\n    Empty = 0,\r\n    King_B = 1,\r\n    Queen_B = 2,\r\n    Rook_B = 3,\r\n    Bishop_B = 4,\r\n    Knight_B = 5,\r\n    Pawn_B = 6,\r\n    King_W = 7,\r\n    Queen_W = 8,\r\n    Rook_W = 9,\r\n    Bishop_W = 10,\r\n    Knight_W = 11,\r\n    Pawn_W = 12\r\n}\r\n\r\nexport enum Value {\r\n    Pawn = 100,\r\n    Knight = 300,\r\n    Bishop = 300,\r\n    Rook = 500,\r\n    Queen = 900\r\n}\r\n\r\nexport interface EvalMove {\r\n    from: number;\r\n    to: number;\r\n    data: number;\r\n    score: number;\r\n}\r\n\r\nexport interface HistoricalBoard {\r\n    board: number[];\r\n    whiteTurn: boolean;\r\n    castleStatus: number;\r\n    pieceLocations: number[][];\r\n    moveCount: number;\r\n    moveRepCount: number;\r\n    repetitionHistory: bigint[];\r\n}\r\n\r\nexport interface DebugMoveOutput {\r\n    from: number;\r\n    to: number;\r\n    piece: number;\r\n    capture: boolean;\r\n    data: number;\r\n    eval: number;\r\n}\r\n\r\nexport enum EngineCommands {\r\n    None = 0,\r\n    RetrieveBoard = 1,\r\n    AttemptMove = 2,\r\n    HistoryGoBack = 3,\r\n    HistoryGoForward = 4,\r\n    BotBestMove = 5,\r\n    BotBestMoveIterative = 6,\r\n    RetrievePieceLocations = 7,\r\n    ReceiveCurrentEval = 8,\r\n    UpdateEval = 9,\r\n    UndoMove = 10,\r\n}\r\n\r\nexport enum EvalCommands {\r\n    ReceiveCurrentEval = 0,\r\n    UpdateState = 1,\r\n    Evaluate = 2,\r\n}\r\n\r\nexport enum Sounds {\r\n    None = 0,\r\n    PieceMoved = 1,\r\n    PieceCaptured = 2,\r\n    Checked = 3,\r\n    Castled = 4,\r\n    IllegalMove = 5,\r\n    GameOver = 6,\r\n    PieceMoved2 = 7\r\n}\r\n\r\nexport const getPieceName = (piece: number) => {\r\n    switch (piece) {\r\n        case Piece.Pawn_W:\r\n        case Piece.Pawn_B:\r\n            return \"Pawn\";\r\n        case Piece.Knight_W:\r\n        case Piece.Knight_B:\r\n            return \"Knight\";\r\n        case Piece.Bishop_W:\r\n        case Piece.Bishop_B:\r\n            return \"Bishop\";\r\n        case Piece.Rook_W:\r\n        case Piece.Rook_B:\r\n            return \"Rook\";\r\n        case Piece.Queen_W:\r\n        case Piece.Queen_B:\r\n            return \"Queen\";\r\n        case Piece.King_W:\r\n        case Piece.King_B:\r\n            return \"King\";\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\nexport const getPieceNameShort = (piece: number) => {\r\n    switch (piece) {\r\n        case Piece.Pawn_W:\r\n            return \"\";\r\n        case Piece.Pawn_B:\r\n            return \"\";\r\n        case Piece.Knight_W:\r\n            return \"N\";\r\n        case Piece.Knight_B:\r\n            return \"n\";\r\n        case Piece.Bishop_W:\r\n            return \"B\";\r\n        case Piece.Bishop_B:\r\n            return \"b\";\r\n        case Piece.Rook_W:\r\n            return \"R\";\r\n        case Piece.Rook_B:\r\n            return \"r\";\r\n        case Piece.Queen_W:\r\n            return \"Q\";\r\n        case Piece.Queen_B:\r\n            return \"q\";\r\n        case Piece.King_W:\r\n            return \"K\";\r\n        case Piece.King_B:\r\n            return \"k\";\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\nexport const notationToIndex = (rank: number, file: string) => {\r\n    const y = 8 - rank;\r\n    const x = file.charCodeAt(0) - 97;\r\n    return (y * 8) + x;\r\n}\r\n\r\nexport const indexToNotation = (index: number) => {\r\n    const y = Math.floor(index / 8);\r\n    const x = index % 8;\r\n    return `${String.fromCharCode(x + 97)}${8 - y}`;\r\n}\r\n\r\n// adapted from https://github.com/SebLague/Chess-AI/blob/main/Assets/Scripts/Core/PieceSquareTable.cs\r\nexport const pawnSquareTable: number[] = [\r\n    0,  0,  0,  0,  0,  0,  0,  0,\r\n    50, 50, 50, 50, 50, 50, 50, 50,\r\n    10, 10, 20, 30, 30, 20, 10, 10,\r\n    5,  5, 10, 25, 25, 10,  5,  5,\r\n    0,  0,  0, 20, 20,  0,  0,  0,\r\n    5, -5,-10,  0,  0,-10, -5,  5,\r\n    5, 10, 10,-20,-20, 10, 10,  5,\r\n    0,  0,  0,  0,  0,  0,  0,  0\r\n];\r\n\r\nexport const knightSquareTable: number[] = [\r\n    -50,-40,-30,-30,-30,-30,-40,-50,\r\n    -40,-20,  0,  0,  0,  0,-20,-40,\r\n    -30,  0, 10, 15, 15, 10,  0,-30,\r\n    -30,  5, 15, 20, 20, 15,  5,-30,\r\n    -30,  0, 15, 20, 20, 15,  0,-30,\r\n    -30,  5, 10, 15, 15, 10,  5,-30,\r\n    -40,-20,  0,  5,  5,  0,-20,-40,\r\n    -50,-40,-30,-30,-30,-30,-40,-50,\r\n];\r\n\r\nexport const bishopSquareTable: number[] = [\r\n    -20,-10,-10,-10,-10,-10,-10,-20,\r\n    -10,  0,  0,  0,  0,  0,  0,-10,\r\n    -10,  0,  5, 10, 10,  5,  0,-10,\r\n    -10,  5,  5, 10, 10,  5,  5,-10,\r\n    -10,  0, 10, 10, 10, 10,  0,-10,\r\n    -10, 10, 10, 10, 10, 10, 10,-10,\r\n    -10,  5,  0,  0,  0,  0,  5,-10,\r\n    -20,-10,-10,-10,-10,-10,-10,-20,\r\n];\r\n\r\nexport const rookSquareTable: number[] = [\r\n    0,  0,  0,  0,  0,  0,  0,  0,\r\n    5, 10, 10, 10, 10, 10, 10,  5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    0,  0,  0,  5,  5,  0,  0,  0\r\n];\r\n\r\nexport const queenSquareTable: number[] = [\r\n    -20,-10,-10, -5, -5,-10,-10,-20,\r\n    -10,  0,  0,  0,  0,  0,  0,-10,\r\n    -10,  0,  5,  5,  5,  5,  0,-10,\r\n    -5,  0,  5,  5,  5,  5,  0, -5,\r\n    0,  0,  5,  5,  5,  5,  0, -5,\r\n    -10,  5,  5,  5,  5,  5,  0,-10,\r\n    -10,  0,  5,  0,  0,  0,  0,-10,\r\n    -20,-10,-10, -5, -5,-10,-10,-20\r\n];\r\n\r\nexport const kingMiddleGameSquareTable: number[] = [\r\n    -30,-40,-40,-50,-50,-40,-40,-30,\r\n    -30,-40,-40,-50,-50,-40,-40,-30,\r\n    -30,-40,-40,-50,-50,-40,-40,-30,\r\n    -30,-40,-40,-50,-50,-40,-40,-30,\r\n    -20,-30,-30,-40,-40,-30,-30,-20,\r\n    -10,-20,-20,-20,-20,-20,-20,-10,\r\n    20, 20,  0,  0,  0,  0, 20, 20,\r\n    20, 30, 10,  0,  0, 10, 30, 20\r\n];\r\n\r\nexport const kingEndGameSquareTable: number[] = [\r\n    -50,-40,-30,-20,-20,-30,-40,-50,\r\n    -30,-20,-10,  0,  0,-10,-20,-30,\r\n    -30,-10, 20, 30, 30, 20,-10,-30,\r\n    -30,-10, 30, 40, 40, 30,-10,-30,\r\n    -30,-10, 30, 40, 40, 30,-10,-30,\r\n    -30,-10, 20, 30, 30, 20,-10,-30,\r\n    -30,-30,  0,  0,  0,  0,-30,-30,\r\n    -50,-30,-30,-30,-30,-30,-30,-50\r\n];","import bigInt from \"big-integer\";\r\nimport { bishopSquareTable, knightSquareTable, pawnSquareTable, Piece, queenSquareTable, rookSquareTable, Value, getPieceName, EvalMove, EngineCommands, kingMiddleGameSquareTable, EvalCommands, HistoricalBoard, DebugMoveOutput, notationToIndex } from \"../definitions\";\r\n\r\n// We alias self to ctx and give it our newly created type\r\nconst ctx: Worker = self as any;\r\n\r\ninterface BoardDelta { // set values to -1 to ignore\r\n    index: number;\r\n    piece: number;\r\n    target: number;\r\n}\r\n\r\ninterface MoveInfo {\r\n    index: number;\r\n    data: number;\r\n}\r\n\r\ninterface EvaluationData {\r\n    totalMoves: number;\r\n    eval: number;\r\n    bestMove: EvalMove;\r\n    depth: number;\r\n    type: number;\r\n}\r\n\r\nenum SavedEvalTypes {\r\n    Exact = 0,\r\n    Alpha = 1,\r\n    Beta = 2\r\n}\r\n\r\nenum CastleStatus { // kingside / queenside\r\n    WhiteKing = 1,\r\n    WhiteQueen = 2,\r\n    BlackKing = 4,\r\n    BlackQueen = 8\r\n}\r\n\r\nexport class Engine {\r\n    boardSize = 8;\r\n    board: number[] = [];\r\n    boardDelta: BoardDelta[] = [];\r\n    boardHash: bigint = BigInt(0);\r\n\r\n    zobristHashTable: bigint[][] = [];\r\n    savedEvaluations: Record<string, EvaluationData> = {};\r\n    evalBestMove: EvalMove = { from: -1, to: -1, data: 0, score: 0 };\r\n    evalBestMoveThisIteration: EvalMove = { from: -1, to: -1, data: 0, score: 0 };\r\n    movesFoundThisTurn: DebugMoveOutput[] = [];\r\n    movesFoundThisIteration: DebugMoveOutput[] = [];\r\n    repetitionHistory: bigint[] = [];\r\n\r\n    searchStartTime = 0;\r\n    searchMaxTime = 3000;\r\n\r\n    pieceCapturedThisTurn = false;\r\n    castledThisTurn = false;\r\n    timeTakenLastTurn = 0;\r\n    depthSearchedThisTurn = 0;\r\n\r\n    pieceLocations: number[][] = [\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n    ]\r\n\r\n    moveCount = 0;\r\n    moveRepCount = 0;\r\n    pinnedPieces: number[] = [];\r\n    historicalBoards: HistoricalBoard[] = [];\r\n    historicalIndex = 0;\r\n    whiteTurn = true;\r\n    castleStatus = 0;\r\n    enPassantSquare = -1;\r\n    allValidMoves: EvalMove[] = [];\r\n\r\n    fenToPieceDict: Record<string, number> = {\r\n        'K': Piece.King_W,\r\n        'Q': Piece.Queen_W,\r\n        'R': Piece.Rook_W,\r\n        'B': Piece.Bishop_W,\r\n        'N': Piece.Knight_W,\r\n        'P': Piece.Pawn_W,\r\n        'k': Piece.King_B,\r\n        'q': Piece.Queen_B,\r\n        'r': Piece.Rook_B,\r\n        'b': Piece.Bishop_B,\r\n        'n': Piece.Knight_B,\r\n        'p': Piece.Pawn_B\r\n    }\r\n    startingMaterialWithoutPawns = (Value.Bishop * 2) + (Value.Knight * 2) + (Value.Rook * 2) + Value.Queen;\r\n    startingMaterial = (Value.Pawn * 8) + this.startingMaterialWithoutPawns;\r\n    endgameMaterialThreshold = (Value.Rook * 2) + (Value.Bishop) + (Value.Knight);\r\n\r\n    constructor() {\r\n        this.board = [];\r\n\r\n        //https://docs.google.com/spreadsheets/d/1fWA-9QW-C8Dc-8LDrEemSligWcprkpKif6cNDs4V_mg/edit#gid=0\r\n        let startingFEN = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\r\n        //startingFEN = \"5ppp/4Ppkp/5ppp/8/6q1/5P2/1K6/8 w - - 0 1\"; // king in a box\r\n        //startingFEN = \"1rk4r/1pp3pp/p2b4/1n3P2/6P1/2nK4/7P/8 b - - 0 1\"; // promotion break\r\n        //startingFEN = \"r3kb1r/ppp1pppp/2n5/6B1/4P1n1/2N5/PPP2PPP/R2K2NR w - - 0 1\"; // fork\r\n        //startingFEN = \"rr2kb2/ppp1pppp/2n3n1/7B/B7/2N5/PPP2PPP/R2KR1N1 b - - 0 1\"; // pins\r\n        //startingFEN = \"2N5/4k2p/p3pp2/6p1/8/P4n1P/4r3/1K1R4 b - - 0 1\"; // threefold test\r\n        //startingFEN = \"8/8/1N4R1/4p3/2P5/2k2n1P/5r2/2K5 w - - 0 1\"; // real threefold\r\n        //startingFEN = \"3r4/3r4/3k4/8/8/3K4/8/8 w - - 0 1\"; // one sided rook endgame\r\n        //startingFEN = \"6k1/5p2/6p1/8/7p/8/6PP/6K1 b - - 0 0\"; // hard pawn endgame\r\n        //startingFEN = \"4R3/1k6/1p2P1p1/p7/4r3/1P1r4/1K6/2R5 w - - 0 0\"; // 4 rooks endgame\r\n        //startingFEN = \"r2qr1k1/1p1b1pp1/3p1b1p/3p4/p2NPPP1/4B3/PPPQ2P1/3RR1K1 w - - 0 1\"; // pawn structure test\r\n\r\n        // initialize the hash table (0-63)\r\n        const maxVal: bigInt.BigNumber = bigInt(2).pow(64).minus(1);\r\n        for (let i = 0; i < 64; i++) {\r\n            this.zobristHashTable.push([]);\r\n            for (let j = 0; j < 12; j++) {\r\n                this.zobristHashTable[i].push(BigInt(bigInt.randBetween(0, maxVal)));\r\n            }\r\n        }\r\n\r\n        // castle values (64)\r\n        let castleValues: bigint[] = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            castleValues.push(BigInt(bigInt.randBetween(0, maxVal)));\r\n        }\r\n        this.zobristHashTable.push(castleValues);\r\n        \r\n        // turn (65)\r\n        this.zobristHashTable.push([BigInt(bigInt.randBetween(0, maxVal))]);\r\n\r\n        // en passant (66)\r\n        let enPassantSquares: bigint[] = [];\r\n        for (let i = 0; i < 64; i++) {\r\n            enPassantSquares.push(BigInt(bigInt.randBetween(0, maxVal)));\r\n        }\r\n        this.zobristHashTable.push(enPassantSquares);\r\n\r\n        this.board = this.parseFEN(startingFEN);\r\n        this.boardHash = this.hashBoard();\r\n        this.repetitionHistory.push(this.boardHash);\r\n        this.historicalBoards.push(this.createHistoricalBoard());\r\n        this.allValidMoves = this.getAllValidMoves();\r\n    }\r\n\r\n    createHistoricalBoard = () => {\r\n        let newPieceLocations: number[][] = [...this.pieceLocations]\r\n        for (let i = 0; i < newPieceLocations.length; i++) {\r\n            newPieceLocations[i] = [...newPieceLocations[i]]\r\n        }\r\n        \r\n        return ({\r\n            board:  [...this.board],\r\n            whiteTurn: this.whiteTurn,\r\n            castleStatus: this.castleStatus,\r\n            pieceLocations: newPieceLocations,\r\n            moveCount: this.moveCount,\r\n            moveRepCount: this.moveRepCount,\r\n            repetitionHistory: [...this.repetitionHistory]\r\n        });\r\n    }\r\n\r\n    useHistoricalBoard = (historicalBoard: HistoricalBoard) => {\r\n        this.board = [...historicalBoard.board];\r\n        this.whiteTurn = historicalBoard.whiteTurn;\r\n        this.castleStatus = historicalBoard.castleStatus;\r\n        this.pieceLocations = [...historicalBoard.pieceLocations];\r\n        for (let i = 0; i < this.pieceLocations.length; i++) {\r\n            this.pieceLocations[i] = [...this.pieceLocations[i]]\r\n        }\r\n        this.moveCount = historicalBoard.moveCount;\r\n        this.moveRepCount = historicalBoard.moveRepCount;\r\n        this.repetitionHistory = [...historicalBoard.repetitionHistory];\r\n        this.boardHash = this.hashBoard();\r\n        this.savedEvaluations = {};\r\n        this.evalBestMove = {} as EvalMove;\r\n        this.movesFoundThisTurn = [];\r\n        this.allValidMoves = this.getAllValidMoves();\r\n    }\r\n\r\n    stepBack = () => {\r\n        if (Math.abs(this.historicalIndex) < this.historicalBoards.length - 1) {\r\n            this.historicalIndex--;\r\n\r\n            const historicalBoard = this.historicalBoards[this.historicalBoards.length - 1 + this.historicalIndex];\r\n            this.useHistoricalBoard(historicalBoard);\r\n        }\r\n    }\r\n\r\n    stepForward = () => {\r\n        if (this.historicalIndex < 0) {\r\n            this.historicalIndex++;\r\n            const historicalBoard = this.historicalBoards[this.historicalBoards.length - 1 + this.historicalIndex];\r\n            this.useHistoricalBoard(historicalBoard);\r\n        }\r\n    }\r\n\r\n    undoMove = () => {\r\n        if (this.historicalBoards.length > 1 && this.historicalIndex == 0) {\r\n            this.historicalIndex = 0;\r\n            const historicalBoard = this.historicalBoards[this.historicalBoards.length - 2];\r\n            this.useHistoricalBoard(historicalBoard);\r\n            this.historicalBoards.pop();\r\n        }\r\n    }\r\n\r\n    hashBoard = () => {\r\n        let hash = BigInt(0);\r\n        \r\n        // board values\r\n        for (let i = 0; i < this.board.length; i++) {\r\n            if (this.board[i] != Piece.Empty) {\r\n                const j = this.board[i] - 1;\r\n                hash = hash ^ this.zobristHashTable[i][j];\r\n            }\r\n        }\r\n\r\n        // castle values\r\n        if ((this.castleStatus & CastleStatus.WhiteKing))\r\n            hash = hash ^ this.zobristHashTable[64][0];\r\n        if ((this.castleStatus & CastleStatus.WhiteQueen))\r\n            hash = hash ^ this.zobristHashTable[64][1];\r\n        if ((this.castleStatus & CastleStatus.BlackKing))\r\n            hash = hash ^ this.zobristHashTable[64][2];\r\n        if ((this.castleStatus & CastleStatus.BlackQueen))\r\n            hash = hash ^ this.zobristHashTable[64][3];\r\n\r\n        // turn\r\n        if (this.whiteTurn)\r\n            hash = hash ^ this.zobristHashTable[65][0];\r\n\r\n        // en passant\r\n        if (this.enPassantSquare != -1)\r\n            hash = hash ^ this.zobristHashTable[66][this.enPassantSquare];\r\n\r\n        return hash;\r\n    }\r\n\r\n    parseFEN = (fenString: string) => {\r\n        let board: number[] = [];\r\n        for (let i = 0; i < this.boardSize * this.boardSize; i++) {\r\n            board.push(Piece.Empty);\r\n        }\r\n\r\n        const fields = fenString.split(' ');\r\n        const ranks = fields[0].split('/');\r\n\r\n        let boardIndex = 0;\r\n        for (let r = 0; r < ranks.length; r++) {\r\n            const terms = ranks[r].split('');\r\n            for (let t = 0; t < terms.length; t++) {\r\n                const numberVal = parseInt(terms[t]);\r\n                if (isNaN(numberVal)) {\r\n                    const piece = this.fenToPieceDict[terms[t]];\r\n                    board[boardIndex] = piece;\r\n\r\n                    this.pieceLocations[piece].push(boardIndex);\r\n\r\n                    boardIndex++;\r\n                }\r\n                else\r\n                    boardIndex += numberVal;\r\n            }\r\n        }\r\n\r\n        this.whiteTurn = fields[1] == 'w';\r\n        this.castleStatus = 0;\r\n\r\n        if (fields[2].includes('K'))\r\n            this.castleStatus |= CastleStatus.WhiteKing;\r\n        if (fields[2].includes('Q'))\r\n            this.castleStatus |= CastleStatus.WhiteQueen;\r\n        if (fields[2].includes('k'))\r\n            this.castleStatus |= CastleStatus.BlackKing;\r\n        if (fields[2].includes('q'))\r\n            this.castleStatus |= CastleStatus.BlackQueen;\r\n\r\n        if (fields[3] != '-')\r\n            this.enPassantSquare = notationToIndex(parseInt(fields[3][1]), fields[3][0]);\r\n\r\n        this.moveRepCount = parseInt(fields[4]);\r\n\r\n        this.moveCount = parseInt(fields[5]) * 2 - 2;\r\n\r\n        return board;\r\n    }\r\n\r\n    traceValidSquares = (index: number, slopeX: number, slopeY: number, white: boolean, onlyEmpty: boolean, updatePins: boolean, inArray: number[]) => {\r\n        let currentIndex = index;\r\n        const xyMax = this.boardSize - 1;\r\n        const length = this.board.length;\r\n\r\n        let obstructed = false;\r\n        let obstructedIndex = 0;\r\n        while (currentIndex >= 0 && currentIndex < length) {\r\n            if (currentIndex != index) {\r\n                if (!obstructed) {\r\n                    if (onlyEmpty) {\r\n                        if (this.board[currentIndex] == Piece.Empty)\r\n                            inArray.push(currentIndex);\r\n                        else\r\n                            break;\r\n                    } else if (this.board[currentIndex] == Piece.Empty || (white && this.board[currentIndex] < 7) || (!white && this.board[currentIndex] >= 7)) {\r\n                        inArray.push(currentIndex);\r\n                    }\r\n                    obstructed = this.board[currentIndex] != Piece.Empty;\r\n                    obstructedIndex = currentIndex;\r\n                }\r\n                else if (updatePins) {\r\n                    // if we are tracing a white piece, look for a black piece blocking the way of the black king\r\n                    if (this.board[currentIndex] == Piece.King_W || this.board[currentIndex] == Piece.King_B || this.board[currentIndex] == Piece.Empty) {\r\n                        if (white && this.board[currentIndex] == Piece.King_B && this.board[obstructedIndex] < 7) {\r\n                            this.pinnedPieces.push(obstructedIndex);\r\n                            break;\r\n                        }\r\n                        else if (!white && this.board[currentIndex] == Piece.King_W && this.board[obstructedIndex] >= 7) {\r\n                            this.pinnedPieces.push(obstructedIndex);\r\n                            break;\r\n                        }\r\n                    } else {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            const x = currentIndex % this.boardSize;\r\n            const y = Math.floor(currentIndex / this.boardSize);\r\n            if (slopeX == -1 && x == 0)\r\n                break;\r\n            if (slopeX == 1 && x == xyMax)\r\n                break;\r\n            if (slopeY == -1 && y == 0)\r\n                break;\r\n            if (slopeY == 1 && y == xyMax)\r\n                break;\r\n\r\n            currentIndex += slopeX + (slopeY * this.boardSize);\r\n        }\r\n    }\r\n\r\n    getValidSquares = (index: number, piece: number, attackOnly: boolean, updatePins: boolean, inArray: number[]) => {\r\n        const x = index % this.boardSize;\r\n        const y = Math.floor(index / this.boardSize);\r\n        const xyMax = this.boardSize - 1;\r\n\r\n        const isWhite = piece >= 7;\r\n        switch (piece) {\r\n            case Piece.Rook_W:\r\n            case Piece.Rook_B:\r\n                this.traceValidSquares(index, 1, 0, isWhite, false, updatePins, inArray); // right\r\n                this.traceValidSquares(index, -1, 0, isWhite, false, updatePins, inArray); // left\r\n                this.traceValidSquares(index, 0, 1, isWhite, false, updatePins, inArray); // down\r\n                this.traceValidSquares(index, 0, -1, isWhite, false, updatePins, inArray); // up\r\n                break;\r\n            case Piece.Queen_W:\r\n            case Piece.Queen_B:\r\n                this.traceValidSquares(index, 1, 0, isWhite, false, updatePins, inArray); // right\r\n                this.traceValidSquares(index, -1, 0, isWhite, false, updatePins, inArray); // left\r\n                this.traceValidSquares(index, 0, 1, isWhite, false, updatePins, inArray); // down\r\n                this.traceValidSquares(index, 0, -1, isWhite, false, updatePins, inArray); // up\r\n                this.traceValidSquares(index, 1, -1, isWhite, false, updatePins, inArray); // up right\r\n                this.traceValidSquares(index, -1, -1, isWhite, false, updatePins, inArray); // up left\r\n                this.traceValidSquares(index, 1, 1, isWhite, false, updatePins, inArray); // down right\r\n                this.traceValidSquares(index, -1, 1, isWhite, false, updatePins, inArray); // down left\r\n                break;\r\n            case Piece.Bishop_W:\r\n            case Piece.Bishop_B:\r\n                this.traceValidSquares(index, 1, -1, isWhite, false, updatePins, inArray); // up right\r\n                this.traceValidSquares(index, -1, -1, isWhite, false, updatePins, inArray); // up left\r\n                this.traceValidSquares(index, 1, 1, isWhite, false, updatePins, inArray); // down right\r\n                this.traceValidSquares(index, -1, 1, isWhite, false, updatePins, inArray); // down left\r\n                break;\r\n            //todo: en passant\r\n            case Piece.Pawn_W:\r\n            {\r\n                const upOne = index - (this.boardSize);\r\n                const upTwo = index - (this.boardSize * 2);\r\n                const upLeft = upOne - 1;\r\n                const upRight = upOne + 1;\r\n                if (!attackOnly) {\r\n                    if (upOne >= 0 && this.board[upOne] == Piece.Empty)\r\n                        inArray.push(upOne);\r\n                    if (y == 6 && this.board[upTwo] == Piece.Empty && this.board[upOne] == Piece.Empty)\r\n                        inArray.push(upTwo);\r\n                }\r\n                if (x != 0 && upLeft >= 0 && (this.board[upLeft] != Piece.Empty || upLeft == this.enPassantSquare || attackOnly) && (this.board[upLeft] < 7 || upLeft == this.enPassantSquare))\r\n                    inArray.push(upLeft);\r\n                if (x != xyMax && upRight >= 0 && (this.board[upRight] != Piece.Empty || upRight == this.enPassantSquare || attackOnly) && (this.board[upRight] < 7 || upRight == this.enPassantSquare))\r\n                    inArray.push(upRight);\r\n                break;\r\n            }\r\n            case Piece.Pawn_B:\r\n            {\r\n                const downOne = index + (this.boardSize);\r\n                const downTwo = index + (this.boardSize * 2);\r\n                const downLeft = downOne - 1;\r\n                const downRight = downOne + 1;\r\n                if (!attackOnly) {\r\n                    if (downOne < this.board.length && this.board[downOne] == Piece.Empty)\r\n                        inArray.push(downOne);\r\n                    if (y == 1 && this.board[downTwo] == Piece.Empty && this.board[downOne] == Piece.Empty)\r\n                        inArray.push(downTwo);\r\n                }\r\n                if (x != 0 && downLeft < this.board.length && (this.board[downLeft] != Piece.Empty || downLeft == this.enPassantSquare || attackOnly) && (this.board[downLeft] >= 7 || this.board[downLeft] == Piece.Empty || downLeft == this.enPassantSquare))\r\n                    inArray.push(downLeft);\r\n                if (x != xyMax && downRight < this.board.length && (this.board[downRight] != Piece.Empty || downRight == this.enPassantSquare || attackOnly) && (this.board[downRight] >= 7 || this.board[downRight] == Piece.Empty || downRight == this.enPassantSquare))\r\n                    inArray.push(downRight);\r\n                break;\r\n            }\r\n            case Piece.King_W:\r\n            case Piece.King_B:\r\n            {\r\n                const upOne = index - (this.boardSize);\r\n                const downOne = index + (this.boardSize);\r\n                const leftOne = index - 1;\r\n                const rightOne = index + 1;\r\n                const upLeft = upOne - 1;\r\n                const upRight = upOne + 1;\r\n                const downLeft = downOne - 1;\r\n                const downRight = downOne + 1;\r\n\r\n                if (upOne >= 0 && (this.board[upOne] == Piece.Empty || (isWhite && this.board[upOne] < 7) || (!isWhite && this.board[upOne] >= 7)))\r\n                    inArray.push(upOne);\r\n                if (downOne < this.board.length && (this.board[downOne] == Piece.Empty || (isWhite && this.board[downOne] < 7) || (!isWhite && this.board[downOne] >= 7)))\r\n                    inArray.push(downOne);\r\n                if (x != 0 && leftOne >= 0 && (this.board[leftOne] == Piece.Empty || (isWhite && this.board[leftOne] < 7) || (!isWhite && this.board[leftOne] >= 7)))\r\n                    inArray.push(leftOne);\r\n                if (x != xyMax && rightOne < this.board.length && (this.board[rightOne] == Piece.Empty || (isWhite && this.board[rightOne] < 7) || (!isWhite && this.board[rightOne] >= 7)))\r\n                    inArray.push(rightOne);\r\n\r\n                if (x != 0 && upLeft >= 0 && (this.board[upLeft] == Piece.Empty || (isWhite && this.board[upLeft] < 7) || (!isWhite && this.board[upLeft] >= 7)))\r\n                    inArray.push(upLeft);\r\n                if (x != xyMax && upRight >= 0 && (this.board[upRight] == Piece.Empty || (isWhite && this.board[upRight] < 7) || (!isWhite && this.board[upRight] >= 7)))\r\n                    inArray.push(upRight);\r\n                if (x != 0 && downLeft < this.board.length && (this.board[downLeft] == Piece.Empty || (isWhite && this.board[downLeft] < 7) || (!isWhite && this.board[downLeft] >= 7)))\r\n                    inArray.push(downLeft);\r\n                if (x != xyMax && downRight < this.board.length && (this.board[downRight] == Piece.Empty || (isWhite && this.board[downRight] < 7) || (!isWhite && this.board[downRight] >= 7)))\r\n                    inArray.push(downRight);\r\n                \r\n                break;\r\n            }\r\n            case Piece.Knight_W:\r\n            case Piece.Knight_B:\r\n            {\r\n                const upLeftOne = index - (this.boardSize) - 2;\r\n                const upLeftTwo = index - (this.boardSize * 2) - 1;\r\n                const upRightOne = index - (this.boardSize * 2) + 1;\r\n                const upRightTwo = index - (this.boardSize) + 2;\r\n                const bottomLeftOne = index + (this.boardSize) - 2;\r\n                const bottomLeftTwo = index + (this.boardSize * 2) - 1;\r\n                const bottomRightOne = index + (this.boardSize * 2) + 1;\r\n                const bottomRightTwo = index + (this.boardSize) + 2;\r\n\r\n                if (x >= 2 && y >= 1 && (this.board[upLeftOne] == Piece.Empty || (isWhite && this.board[upLeftOne] < 7) || (!isWhite && this.board[upLeftOne] >= 7)))\r\n                    inArray.push(upLeftOne);\r\n                if (x >= 1 && y >= 2 && (this.board[upLeftTwo] == Piece.Empty || (isWhite && this.board[upLeftTwo] < 7) || (!isWhite && this.board[upLeftTwo] >= 7)))\r\n                    inArray.push(upLeftTwo);\r\n                if (x <= xyMax - 1 && y >= 2 && (this.board[upRightOne] == Piece.Empty || (isWhite && this.board[upRightOne] < 7) || (!isWhite && this.board[upRightOne] >= 7)))\r\n                    inArray.push(upRightOne);\r\n                if (x <= xyMax - 2 && y >= 1 && (this.board[upRightTwo] == Piece.Empty || (isWhite && this.board[upRightTwo] < 7) || (!isWhite && this.board[upRightTwo] >= 7)))\r\n                    inArray.push(upRightTwo);\r\n                \r\n                if (x >= 2 && y <= xyMax - 1 && (this.board[bottomLeftOne] == Piece.Empty || (isWhite && this.board[bottomLeftOne] < 7) || (!isWhite && this.board[bottomLeftOne] >= 7)))\r\n                    inArray.push(bottomLeftOne);\r\n                if (x >= 1 && y <= xyMax - 2 && (this.board[bottomLeftTwo] == Piece.Empty || (isWhite && this.board[bottomLeftTwo] < 7) || (!isWhite && this.board[bottomLeftTwo] >= 7)))\r\n                    inArray.push(bottomLeftTwo);\r\n                if (x <= xyMax - 1 && y <= xyMax - 2 && (this.board[bottomRightOne] == Piece.Empty || (isWhite && this.board[bottomRightOne] < 7) || (!isWhite && this.board[bottomRightOne] >= 7)))\r\n                    inArray.push(bottomRightOne);\r\n                if (x <= xyMax - 2 && y <= xyMax - 1 && (this.board[bottomRightTwo] == Piece.Empty || (isWhite && this.board[bottomRightTwo] < 7) || (!isWhite && this.board[bottomRightTwo] >= 7)))\r\n                    inArray.push(bottomRightTwo);\r\n                \r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getAttackedSquares = (white: boolean, toIndex: number) => {\r\n        let attackedSquares: number[] = [];\r\n\r\n        const startIndex = white ? 1 : 7;\r\n        const endIndex = white ? 6 : 12;\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n            const length = this.pieceLocations[i].length;\r\n            for (let j = 0; j < length; j++) {\r\n                if (this.pieceLocations[i][j] == toIndex) // when searching for valid moves, instead of modifying the piece dictionaries, just ignore any piece that would have been captured\r\n                    continue;\r\n                this.getValidSquares(this.pieceLocations[i][j], i, true, false, attackedSquares);\r\n            }\r\n        }\r\n\r\n        return attackedSquares;\r\n    }\r\n\r\n    updatePinnedSquares = (white: boolean) => {\r\n        let tempArray: number[] = [];\r\n\r\n        // we only care about sliding pieces of the opposite color for pins\r\n        const startIndex = white ? 2 : 8;\r\n        const endIndex = white ? 4 : 10;\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n            const length = this.pieceLocations[i].length;\r\n            for (let j = 0; j < length; j++) {\r\n                this.getValidSquares(this.pieceLocations[i][j], i, true, true, tempArray);\r\n            }\r\n        }\r\n    }\r\n\r\n    getValidCastleSquares = (attackedSquares: number[], inArray: EvalMove[]) => {\r\n        if (this.whiteTurn) {\r\n            let traced: number[] = [];\r\n            this.traceValidSquares(60, 1, 0, false, true, false, traced);\r\n            if ((this.castleStatus & CastleStatus.WhiteKing) && this.board[63] == Piece.Rook_W && traced.length == 2) {\r\n                if (!attackedSquares.includes(60) && !attackedSquares.includes(61) && !attackedSquares.includes(62)) {\r\n                    inArray.push({ from: 60, to: 62, data: 0, score: 0 });\r\n                }\r\n            }\r\n            traced = [];\r\n            this.traceValidSquares(60, -1, 0, false, true, false, traced);\r\n            if ((this.castleStatus & CastleStatus.WhiteQueen) && this.board[56] == Piece.Rook_W && traced.length == 3) {\r\n                if (!attackedSquares.includes(60) && !attackedSquares.includes(59) && !attackedSquares.includes(58)) {\r\n                    inArray.push({ from: 60, to: 58, data: 0, score: 0 });\r\n                }\r\n            }\r\n        } else {\r\n            let traced: number[] = [];\r\n            this.traceValidSquares(4, 1, 0, false, true, false, traced);\r\n            if ((this.castleStatus & CastleStatus.BlackKing) && this.board[7] == Piece.Rook_B && traced.length == 2) {\r\n                if (!attackedSquares.includes(4) && !attackedSquares.includes(5) && !attackedSquares.includes(6)) {\r\n                    inArray.push({ from: 4, to: 6, data: 0, score: 0 });\r\n                }\r\n            }\r\n            traced = [];\r\n            this.traceValidSquares(4, -1, 0, false, true, false, traced);\r\n            if ((this.castleStatus & CastleStatus.BlackQueen) && this.board[0] == Piece.Rook_B && traced.length == 3) {\r\n                if (!attackedSquares.includes(4) && !attackedSquares.includes(3) && !attackedSquares.includes(2)) {\r\n                    inArray.push({ from: 4, to: 2, data: 0, score: 0 });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isInCheck = (white: boolean) => {\r\n        const attacked = this.getAttackedSquares(white, -1);\r\n        return this.isInCheckAttackedSquares(white, attacked);\r\n    }\r\n\r\n    isInCheckAttackedSquares = (white: boolean, attacked: number[]) => {\r\n        return ((white && attacked.includes(this.pieceLocations[Piece.King_W][0])) || (!white && attacked.includes(this.pieceLocations[Piece.King_B][0])));\r\n    }\r\n\r\n    getAllValidMoves = (capturesOnly: boolean = false, baseAttackedSquares: number[] = []) => {\r\n        let allValid: EvalMove[] = [];\r\n        if (baseAttackedSquares.length == 0)\r\n            baseAttackedSquares = this.getAttackedSquares(this.whiteTurn, -1);\r\n\r\n        if (!capturesOnly)\r\n            this.getValidCastleSquares(baseAttackedSquares, allValid);\r\n\r\n        this.pinnedPieces = [];\r\n        this.updatePinnedSquares(this.whiteTurn);\r\n        const inCheck = this.isInCheckAttackedSquares(this.whiteTurn, baseAttackedSquares);\r\n\r\n        const startIndex = this.whiteTurn ? 7 : 1;\r\n        const endIndex = this.whiteTurn ? 12 : 6;\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n            const length = this.pieceLocations[i].length;\r\n            for (let j = 0; j < length; j++) {\r\n                const location = this.pieceLocations[i][j];\r\n\r\n                let valid: number[] = [];\r\n                this.getValidSquares(location, i, capturesOnly, false, valid);\r\n\r\n                const isPinned = this.pinnedPieces.includes(location);\r\n                const validLength = valid.length;\r\n                for (let k = 0; k < validLength; k++) {\r\n                    if (capturesOnly && this.board[valid[k]] == Piece.Empty)\r\n                        continue;\r\n\r\n                    if (inCheck || isPinned || i == Piece.King_W || i == Piece.King_B) { // more optimizations here?\r\n                    //if (true) {\r\n                        const pieceBackup = this.board[valid[k]];\r\n                        const backup2 = this.board[location];\r\n                        this.board[valid[k]] = i;\r\n                        this.board[location] = Piece.Empty;\r\n                        const attacked: number[] = this.getAttackedSquares(this.whiteTurn, valid[k]);\r\n                        this.board[valid[k]] = pieceBackup;\r\n                        this.board[location] = backup2;\r\n                        if (i == Piece.King_W || i == Piece.King_B) {\r\n                            if (attacked.includes(valid[k]))\r\n                                continue;\r\n                        }\r\n                        else if (this.isInCheckAttackedSquares(this.whiteTurn, attacked))\r\n                            continue;\r\n                    }\r\n\r\n                    // add more moves to account for promoting to various pieces\r\n                    const y = Math.floor(valid[k] / this.boardSize);\r\n                    if (i == Piece.Pawn_W && y == 0) {\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Queen_W, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Rook_W, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Bishop_W, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Knight_W, score: 0 });\r\n                    } else if (i == Piece.Pawn_B && y == 7) {\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Queen_B, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Rook_B, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Bishop_B, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Knight_B, score: 0 });\r\n                    } else {\r\n                        allValid.push({ from: location, to: valid[k], data: 0, score: 0 });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return allValid;\r\n    }\r\n\r\n    finishTurn = () => {\r\n        this.whiteTurn = !this.whiteTurn;\r\n        this.historicalBoards.push(this.createHistoricalBoard());\r\n        this.boardHash = this.hashBoard();\r\n        this.boardDelta = [];\r\n        this.allValidMoves = this.getAllValidMoves();\r\n        this.savedEvaluations = {};\r\n\r\n        this.moveCount++;\r\n        this.moveRepCount++;\r\n    }\r\n\r\n    forceMakeMove = (fromIndex: number, move: MoveInfo, finishTurn: boolean) => {\r\n        const toIndex = move.index;\r\n        const movingPiece = this.board[fromIndex];\r\n        const capturedPiece = this.board[toIndex];\r\n\r\n        this.boardDelta.push({ index: toIndex, piece: capturedPiece, target: -1 });\r\n        this.boardDelta.push({ index: fromIndex, piece: movingPiece, target: toIndex });\r\n        this.board[toIndex] = this.board[fromIndex];\r\n        this.board[fromIndex] = Piece.Empty;\r\n\r\n        // promotion check\r\n        let promoted = false;\r\n        const y = Math.floor(toIndex / this.boardSize);\r\n        if (this.board[toIndex] == Piece.Pawn_W && y == 0) {\r\n            this.board[toIndex] = move.data;\r\n            this.pieceLocations[Piece.Pawn_W].splice(this.pieceLocations[Piece.Pawn_W].indexOf(fromIndex), 1); // remove pawn entry\r\n            this.pieceLocations[move.data].push(toIndex); // add new piece entry\r\n            this.boardDelta.push({ index: -1, piece: move.data, target: toIndex }); // add promotion delta\r\n            promoted = true;\r\n        }\r\n        else if (this.board[toIndex] == Piece.Pawn_B && y == 7) {\r\n            this.board[toIndex] = move.data;\r\n            this.pieceLocations[Piece.Pawn_B].splice(this.pieceLocations[Piece.Pawn_B].indexOf(fromIndex), 1); // remove pawn entry\r\n            this.pieceLocations[move.data].push(toIndex); // add new piece entry\r\n            this.boardDelta.push({ index: -1, piece: move.data, target: toIndex }); // add promotion delta\r\n            promoted = true;\r\n        }\r\n\r\n        // en passant check\r\n        if (toIndex == this.enPassantSquare) { // capturing en passant, so remove the pawn and add a delta\r\n            if (movingPiece == Piece.Pawn_W) {\r\n                this.boardDelta.push({ index: toIndex + 8, piece: Piece.Pawn_B, target: -1 });\r\n                this.board[toIndex + 8] = Piece.Empty;\r\n            } else if (movingPiece == Piece.Pawn_B) {\r\n                this.boardDelta.push({ index: toIndex - 8, piece: Piece.Pawn_W, target: -1 });\r\n                this.board[toIndex - 8] = Piece.Empty;\r\n            }\r\n        }\r\n\r\n        if (movingPiece == Piece.Pawn_W && fromIndex - toIndex == 16) { // moving two spaces up\r\n            this.enPassantSquare = fromIndex - 8;\r\n            this.boardDelta.push({ index: -1, piece: Piece.Empty, target: -1 });\r\n        }\r\n        else if (movingPiece == Piece.Pawn_B && toIndex - fromIndex == 16) { // moving two spaces down\r\n            this.enPassantSquare = fromIndex + 8;\r\n            this.boardDelta.push({ index: -1, piece: Piece.Empty, target: -1 });\r\n        }\r\n        else {\r\n            this.enPassantSquare = -1;\r\n        }\r\n\r\n        // update moved piece position unless promoted since that is already handled\r\n        if (!promoted) {\r\n            this.pieceLocations[movingPiece].splice(this.pieceLocations[movingPiece].indexOf(fromIndex), 1, toIndex); // update stored position\r\n        }\r\n\r\n        // remove captured piece\r\n        if (capturedPiece != Piece.Empty) {\r\n            this.pieceLocations[capturedPiece].splice(this.pieceLocations[capturedPiece].indexOf(toIndex), 1); // remove entry\r\n        }\r\n\r\n        if (finishTurn) {\r\n            this.finishTurn();\r\n\r\n            // update board repetition history\r\n            if (movingPiece == Piece.Pawn_W || movingPiece == Piece.Pawn_B || capturedPiece != Piece.Empty) { // repetitions not possible with these moves\r\n                this.repetitionHistory = [];\r\n                this.moveRepCount = 0;\r\n            } else {\r\n                this.repetitionHistory.push(this.boardHash);\r\n            }\r\n        }\r\n    }\r\n\r\n    unmakeMove = (deltas: BoardDelta[]) => {\r\n        this.whiteTurn = !this.whiteTurn;\r\n\r\n        for (let i = 0; i < deltas.length; i++) {\r\n            if (deltas[i].piece != Piece.Empty) { // ignore any empty piece entries\r\n                if (deltas[i].index == -1) { // if the original index is -1, it means the piece was created from promotion, so remove the piece\r\n                    this.pieceLocations[deltas[i].piece].splice(this.pieceLocations[deltas[i].piece].indexOf(deltas[i].target), 1); // remove entry\r\n                }\r\n                else if (this.board[deltas[i].index] != Piece.Empty) { // was captured so add the piece back to register\r\n                    this.pieceLocations[deltas[i].piece].push(deltas[i].index);\r\n                } else if (deltas[i].target != -1) { // otherwise just move it back\r\n                    const foundIndex = this.pieceLocations[deltas[i].piece].indexOf(deltas[i].target);\r\n                        if (foundIndex != -1)\r\n                            this.pieceLocations[deltas[i].piece].splice(foundIndex, 1, deltas[i].index); // replace with new location\r\n                        else\r\n                            this.pieceLocations[deltas[i].piece].push(deltas[i].index);\r\n                }\r\n            }\r\n\r\n            if (deltas[i].index != -1)\r\n                this.board[deltas[i].index] = deltas[i].piece;\r\n        }\r\n    }\r\n\r\n    updateCastleStatus = (fromIndex: number, toIndex: number) => {\r\n        const movingPiece = this.board[fromIndex];\r\n        let castled = false;\r\n\r\n        if (movingPiece == Piece.King_W) {\r\n            if ((this.castleStatus & CastleStatus.WhiteKing) && toIndex == 62) {\r\n                this.boardDelta.push({ index: 63, piece: this.board[63], target: 61 });\r\n                this.boardDelta.push({ index: 61, piece: this.board[61], target: -1 });\r\n                this.pieceLocations[Piece.Rook_W].splice(this.pieceLocations[Piece.Rook_W].indexOf(63), 1, 61); // replace with new location\r\n                this.board[63] = Piece.Empty;\r\n                this.board[61] = Piece.Rook_W;\r\n                castled = true;\r\n            } else if ((this.castleStatus & CastleStatus.WhiteQueen) && toIndex == 58) {\r\n                this.boardDelta.push({ index: 56, piece: this.board[56], target: 59 });\r\n                this.boardDelta.push({ index: 59, piece: this.board[59], target: -1 });\r\n                this.pieceLocations[Piece.Rook_W].splice(this.pieceLocations[Piece.Rook_W].indexOf(56), 1, 59); // replace with new location\r\n                this.board[56] = Piece.Empty;\r\n                this.board[59] = Piece.Rook_W;\r\n                castled = true;\r\n            }\r\n\r\n            this.castleStatus &= ~CastleStatus.WhiteKing;\r\n            this.castleStatus &= ~CastleStatus.WhiteQueen;\r\n        }\r\n        else if (movingPiece == Piece.King_B) {\r\n            if ((this.castleStatus & CastleStatus.BlackKing) && toIndex == 6) {\r\n                this.boardDelta.push({ index: 7, piece: this.board[7], target: 5 });\r\n                this.boardDelta.push({ index: 5, piece: this.board[5], target: -1 });\r\n                this.pieceLocations[Piece.Rook_B].splice(this.pieceLocations[Piece.Rook_B].indexOf(7), 1, 5); // replace with new location\r\n                this.board[7] = Piece.Empty;\r\n                this.board[5] = Piece.Rook_B;\r\n                castled = true;\r\n            } else if ((this.castleStatus & CastleStatus.BlackQueen) && toIndex == 2) {\r\n                this.boardDelta.push({ index: 0, piece: this.board[0], target: 3 });\r\n                this.boardDelta.push({ index: 3, piece: this.board[3], target: -1 });\r\n                this.pieceLocations[Piece.Rook_B].splice(this.pieceLocations[Piece.Rook_B].indexOf(0), 1, 3); // replace with new location\r\n                this.board[0] = Piece.Empty;\r\n                this.board[3] = Piece.Rook_B;\r\n                castled = true;\r\n            }\r\n\r\n            this.castleStatus &= ~CastleStatus.BlackKing;\r\n            this.castleStatus &= ~CastleStatus.BlackQueen;\r\n        } // add castling info deltas\r\n        else if (movingPiece == Piece.Rook_W && fromIndex == 56) {\r\n            this.castleStatus &= ~CastleStatus.WhiteQueen;\r\n        }\r\n        else if (movingPiece == Piece.Rook_W && fromIndex == 63) {\r\n            this.castleStatus &= ~CastleStatus.WhiteKing;\r\n        }\r\n        else if (movingPiece == Piece.Rook_B && fromIndex == 0) {\r\n            this.castleStatus &= ~CastleStatus.BlackQueen;\r\n        }\r\n        else if (movingPiece == Piece.Rook_B && fromIndex == 7) {\r\n            this.castleStatus &= ~CastleStatus.BlackKing;\r\n        }\r\n\r\n        return castled;\r\n    }    \r\n\r\n    updateHash = (delta: BoardDelta[], hash: bigint, oldEnPassant: number, oldCastleStatus: number) => {\r\n        let newHash = hash;\r\n\r\n        // positions\r\n        for (let i = 0; i < delta.length; i++) {\r\n            if (delta[i].index != -1) { // -1 entries are usually for tracking, so don't worry about them when updating the hash\r\n                const pos = delta[i].index;\r\n                const piece = delta[i].piece - 1;\r\n                const newPiece = this.board[pos] - 1;\r\n                if (piece >= 0)\r\n                    newHash = newHash ^ this.zobristHashTable[pos][piece];\r\n                if (newPiece >= 0)\r\n                    newHash = newHash ^ this.zobristHashTable[pos][newPiece];\r\n            }\r\n        }\r\n\r\n        // castling\r\n        if ((oldCastleStatus & CastleStatus.WhiteKing) != (this.castleStatus & CastleStatus.WhiteKing)) {\r\n            hash = hash ^ this.zobristHashTable[64][0]; // flip\r\n        }\r\n        if ((oldCastleStatus & CastleStatus.WhiteQueen) != (this.castleStatus & CastleStatus.WhiteQueen)) {\r\n            hash = hash ^ this.zobristHashTable[64][1]; // flip\r\n        }\r\n        if ((oldCastleStatus & CastleStatus.BlackKing) != (this.castleStatus & CastleStatus.BlackKing)) {\r\n            hash = hash ^ this.zobristHashTable[64][2]; // flip\r\n        }\r\n        if ((oldCastleStatus & CastleStatus.BlackQueen) != (this.castleStatus & CastleStatus.BlackQueen)) {\r\n            hash = hash ^ this.zobristHashTable[64][3]; // flip\r\n        }\r\n\r\n        // turn\r\n        newHash = newHash ^ this.zobristHashTable[65][0];\r\n\r\n        // en passant\r\n        if (oldEnPassant != this.enPassantSquare) {\r\n            if (oldEnPassant != -1)\r\n                newHash = newHash ^ this.zobristHashTable[66][oldEnPassant];\r\n            if (this.enPassantSquare != -1)\r\n                newHash = newHash ^ this.zobristHashTable[66][this.enPassantSquare];\r\n        }\r\n\r\n        return newHash;\r\n    }\r\n\r\n    getPieceCount = () => {\r\n        let pieceCount = 0;\r\n        for (let i = 1; i < this.pieceLocations.length; i++) {\r\n            pieceCount += this.pieceLocations[i].length;\r\n        }\r\n        return pieceCount;\r\n    }\r\n\r\n    checkForDraw = () => {\r\n        if (this.moveRepCount >= 50) {\r\n            //console.log(\"Draw by 50 rep\")\r\n            return true;\r\n        }\r\n\r\n        if (!this.whiteTurn) // white's last move cannot be a draw\r\n            return false;\r\n\r\n        if (this.getPieceCount() == 2) // only the kings are left\r\n            return true;\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < this.repetitionHistory.length; i++) {\r\n            if (this.repetitionHistory[i] == this.boardHash)\r\n                count++;\r\n            if (count == 3) {\r\n                //console.log(\"Draw by 3 rep\")\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    predictAndOrderMoves = (moves: EvalMove[], attackedSquares: number[]) => {\r\n        const movesLength = moves.length;\r\n        \r\n        for (let i = 0; i < movesLength; i++) {\r\n            let score = 0;\r\n            const movingPiece = this.board[moves[i].from];\r\n            const capturingPiece = this.board[moves[i].to];\r\n            const promoting = moves[i].data;\r\n\r\n            if (capturingPiece != Piece.Empty) {\r\n                score = 10 * this.getPieceValue(capturingPiece) - this.getPieceValue(movingPiece); // apply a higher score for lower val piece capturing higher val\r\n            }\r\n\r\n            // deprioritize moving into attacked squares\r\n            if (attackedSquares.includes(moves[i].to)) {\r\n                score -= this.getPieceValue(movingPiece);\r\n            }\r\n\r\n            // score promotion moves\r\n            if (movingPiece == Piece.Pawn_W || movingPiece == Piece.Pawn_B) {\r\n                switch (promoting) {\r\n                    case Piece.Knight_W:\r\n                    case Piece.Knight_B:\r\n                        score += this.getPieceValue(Piece.Knight_W);\r\n                        break;\r\n                    case Piece.Bishop_W:\r\n                    case Piece.Bishop_B:\r\n                        score += this.getPieceValue(Piece.Bishop_W);\r\n                        break;\r\n                    case Piece.Queen_W:\r\n                    case Piece.Queen_B:\r\n                        score += this.getPieceValue(Piece.Queen_W);\r\n                        break;\r\n                    case Piece.Rook_W:\r\n                    case Piece.Rook_B:\r\n                        score += this.getPieceValue(Piece.Rook_W);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            moves[i].score = score;\r\n        }\r\n\r\n        moves.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n    }\r\n\r\n    readSquareTableValue = (index: number, table: number[], white: boolean) => {\r\n        if (!white)\r\n            index = 63 - index;\r\n        return table[index];\r\n    }\r\n\r\n    evaluateSquareTable = (piece: number, table: number[], white: boolean) => {\r\n        let value = 0;\r\n        if (piece == Piece.Empty)\r\n            return 0;\r\n\r\n        const positions = this.pieceLocations[piece];\r\n        const length = positions.length;\r\n        for (let i = 0; i < length; i++) {\r\n            value += this.readSquareTableValue(positions[i], table, white);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    evaluateSquareTables = (white: boolean, endgameWeight: number) => {\r\n        let value = 0;\r\n\r\n        // ugly\r\n        if (white) {\r\n            value += this.evaluateSquareTable(Piece.Pawn_W, pawnSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Rook_W, rookSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Knight_W, knightSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Bishop_W, bishopSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Queen_W, queenSquareTable, white);\r\n            let kingMiddlegameValue = this.evaluateSquareTable(Piece.King_W, kingMiddleGameSquareTable, white);\r\n            value += Math.floor(kingMiddlegameValue * (1 - endgameWeight));\r\n        } else {\r\n            value += this.evaluateSquareTable(Piece.Pawn_B, pawnSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Rook_B, rookSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Knight_B, knightSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Bishop_B, bishopSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Queen_B, queenSquareTable, white);\r\n            let kingMiddlegameValue = this.evaluateSquareTable(Piece.King_B, kingMiddleGameSquareTable, white);\r\n            value += Math.floor(kingMiddlegameValue * (1 - endgameWeight));\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    evaluateEndgamePosition = (endgameWeight: number, opponentKingX: number, opponentKingY: number, distance: number) => {\r\n        let score = 0;\r\n\r\n        // try to push the enemy king into the corner\r\n        const distToCenter = Math.abs(opponentKingX - 4) + Math.abs(opponentKingY - 4);\r\n        score += distToCenter;\r\n\r\n        // try and move kings together\r\n        score += 14 - distance;\r\n\r\n        return Math.floor(score * 20 * endgameWeight);\r\n    }\r\n\r\n    evaluatePawnStructure = (white: boolean) => {\r\n        let score = 0;\r\n        let pawnList = this.pieceLocations[white ? Piece.Pawn_W : Piece.Pawn_B];\r\n        const length = pawnList.length;\r\n        for (let i = 0; i < length; i++) {\r\n            if ((white && this.board[pawnList[i] + 8] == Piece.Pawn_W) || (!white && this.board[pawnList[i] - 8] == Piece.Pawn_B)) // check for doubled pawns\r\n                score -= 2;\r\n            const protectedLeft = (white && this.board[pawnList[i] + 7] == Piece.Pawn_W) || (!white && this.board[pawnList[i] - 7] != Piece.Pawn_B);\r\n            const protectedRight = (white && this.board[pawnList[i] + 9] == Piece.Pawn_W) || (!white && this.board[pawnList[i] - 9] != Piece.Pawn_B);\r\n            if (!protectedLeft && !protectedRight) // isolate\r\n                score -= 2;\r\n            else if (protectedRight || protectedLeft)\r\n                score += 2;\r\n        }\r\n        return score * 10;\r\n    }\r\n\r\n    evaluate = () => {\r\n        const materialWeight = 1;\r\n        const developmentWeight = 1;\r\n\r\n        const whiteMaterial = this.countMaterial(true);\r\n        const blackMaterial = this.countMaterial(false);\r\n        const whiteMaterialWithoutPawns = whiteMaterial - (this.pieceLocations[Piece.Pawn_W].length * this.getPieceValue(Piece.Pawn_W)); \r\n        const blackMaterialWithoutPawns = blackMaterial - (this.pieceLocations[Piece.Pawn_B].length * this.getPieceValue(Piece.Pawn_B)); \r\n\r\n        const whiteEndgameWeight = 1 - Math.min(1, whiteMaterialWithoutPawns / this.endgameMaterialThreshold);\r\n        const blackEndgameWeight = 1 - Math.min(1, blackMaterialWithoutPawns / this.endgameMaterialThreshold);\r\n\r\n        let whiteEval = whiteMaterial * materialWeight;\r\n        let blackEval = blackMaterial * materialWeight;\r\n        \r\n        whiteEval += Math.floor(this.evaluateSquareTables(true, whiteEndgameWeight) * developmentWeight);\r\n        blackEval += Math.floor(this.evaluateSquareTables(false, blackEndgameWeight) * developmentWeight);\r\n\r\n        const whiteX = this.pieceLocations[Piece.King_W][0] % this.boardSize;\r\n        const whiteY = Math.floor(this.pieceLocations[Piece.King_W][0] / this.boardSize);\r\n        const blackX = this.pieceLocations[Piece.King_B][0] % this.boardSize;\r\n        const blackY = Math.floor(this.pieceLocations[Piece.King_B][0] / this.boardSize);\r\n        const distanceBetween = Math.abs(whiteX - blackX) + Math.abs(whiteY - blackY);\r\n        whiteEval += this.evaluateEndgamePosition(whiteEndgameWeight, blackX, blackY, distanceBetween);\r\n        blackEval += this.evaluateEndgamePosition(blackEndgameWeight, whiteX, whiteY, distanceBetween);\r\n\r\n        //whiteEval += this.evaluatePawnStructure(true);\r\n        //blackEval += this.evaluatePawnStructure(false);\r\n\r\n        let evaluation = whiteEval - blackEval;\r\n        if (!this.whiteTurn)\r\n            evaluation *= -1;\r\n\r\n        return evaluation;\r\n    }\r\n\r\n    getPieceValue = (piece: number) => {\r\n        switch (piece) {\r\n            case Piece.Pawn_W:\r\n            case Piece.Pawn_B:\r\n                return Value.Pawn;\r\n            case Piece.Knight_W:\r\n            case Piece.Knight_B:\r\n                return Value.Knight;\r\n            case Piece.Bishop_W:\r\n            case Piece.Bishop_B:\r\n                return Value.Bishop;\r\n            case Piece.Rook_W:\r\n            case Piece.Rook_B:\r\n                return Value.Rook;\r\n            case Piece.Queen_W:\r\n            case Piece.Queen_B:\r\n                return Value.Queen;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    countMaterial = (white: boolean) => {\r\n        let value: number = 0;\r\n\r\n        const startIndex = white ? 8 : 2;\r\n        const endIndex = white ? 12 : 6;\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n            value += this.getPieceValue(i) * this.pieceLocations[i].length;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    findBestMoveWithIterativeDeepening = () => {\r\n        this.searchStartTime = Date.now();\r\n        const maxDepth = 30;\r\n        let lastCompletedDepth = 0;\r\n\r\n        for (let i = 3; i <= maxDepth; i++) {\r\n            const iterationStartTime = self.performance.now();\r\n            this.findBestMove(true, i, 0, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n            const iterationEndTime = self.performance.now();\r\n\r\n            if (Date.now() - this.searchStartTime >= this.searchMaxTime) // search aborted so dont update move\r\n                break;\r\n\r\n            //console.log(`Finished iteration ${i} in ${Math.floor(iterationEndTime - iterationStartTime)}ms`);\r\n\r\n            lastCompletedDepth = i;\r\n            this.movesFoundThisTurn = this.movesFoundThisIteration;\r\n            this.movesFoundThisIteration = [];\r\n            this.evalBestMove = this.evalBestMoveThisIteration;\r\n            ctx.postMessage({ command: EvalCommands.ReceiveCurrentEval, eval: this.whiteTurn ? this.evalBestMove.score : -1 * this.evalBestMove.score });\r\n\r\n            if (this.evalBestMoveThisIteration.score > 99999999) // mate\r\n                break;\r\n        }\r\n        \r\n        this.depthSearchedThisTurn = lastCompletedDepth;\r\n    }\r\n\r\n    // lower bound: alpha, upper bound: beta\r\n    findBestMove = (canCancel: boolean, depth: number, offset: number, alpha: number, beta: number) => {\r\n        if (canCancel && Date.now() - this.searchStartTime >= this.searchMaxTime) // abort search\r\n            return 0;\r\n\r\n        if (offset > 0) {\r\n            // detect any repetition and assume a draw is coming (return a 0 draw score)\r\n            if (this.repetitionHistory.includes(this.boardHash))\r\n                return 0;\r\n\r\n            // modify the values to skip this position if a mating sequence has already been found and is shorter\r\n            alpha = Math.max(alpha, Number.MIN_SAFE_INTEGER + offset);\r\n            beta = Math.min(beta, Number.MAX_SAFE_INTEGER - offset);\r\n            if (alpha >= beta) {\r\n                return alpha;\r\n            }\r\n        }\r\n\r\n        const hashString = this.boardHash.toString();\r\n        if (hashString in this.savedEvaluations) {\r\n            const savedEval = this.savedEvaluations[hashString];\r\n            let finalScore = savedEval.eval;\r\n            let shouldReturn = false;\r\n            if (savedEval.depth >= depth) {\r\n                if (savedEval.type == SavedEvalTypes.Exact) // exact eval was saved so just return it\r\n                    shouldReturn = true;\r\n                else if (savedEval.type == SavedEvalTypes.Alpha && finalScore <= alpha) // if we are storing the lower bound, only search if it is greater than the current lower bound\r\n                    shouldReturn = true;\r\n                else if (savedEval.type == SavedEvalTypes.Beta && finalScore >= beta) // if we are storing the upper bound, only search if it is less than the current upper bound\r\n                    shouldReturn = true;\r\n            }\r\n            if (shouldReturn) {\r\n                if (offset == 0) {\r\n                    this.evalBestMoveThisIteration = this.savedEvaluations[hashString].bestMove;\r\n                    this.evalBestMoveThisIteration.score = this.savedEvaluations[hashString].eval;\r\n                }\r\n                return finalScore;\r\n            }\r\n        }\r\n\r\n        if (depth <= 0)\r\n            return this.quiescenceSearch(alpha, beta);\r\n\r\n        const attackedSquares = this.getAttackedSquares(this.whiteTurn, -1);\r\n        const validMoves = this.getAllValidMoves(false, attackedSquares);\r\n        if (validMoves.length == 0) { // either checkmate or stalemate\r\n            if (this.isInCheckAttackedSquares(this.whiteTurn, attackedSquares))\r\n                return Number.MIN_SAFE_INTEGER + offset; // checkmate, worst possible move\r\n            else\r\n                return 0; // stalemate, draw\r\n        }\r\n        this.predictAndOrderMoves(validMoves, attackedSquares);\r\n\r\n        const startingHash = this.boardHash;\r\n        const oldEnPassant = this.enPassantSquare;\r\n        const oldCastleStatus = this.castleStatus;\r\n        let bestMoveForThisPosition: EvalMove = { from: -1, to: -1, data: 0, score: 0 };\r\n        let savingType = SavedEvalTypes.Alpha;\r\n        const length = validMoves.length;\r\n        for (let i = 0; i < length; i++) {\r\n            // make the move (todo: move to function)\r\n            this.updateCastleStatus(validMoves[i].from, validMoves[i].to);\r\n            this.forceMakeMove(validMoves[i].from, { index: validMoves[i].to, data: validMoves[i].data }, false);\r\n            const deltas = this.boardDelta;\r\n            this.boardDelta = [];\r\n            this.whiteTurn = !this.whiteTurn;\r\n            this.boardHash = this.updateHash(deltas, startingHash, oldEnPassant, oldCastleStatus);\r\n\r\n            // calculate evaluation (one player's upper bound is the other's lower bound)\r\n            let evaluation: number = -1 * this.findBestMove(canCancel, depth - 1, offset + 1, -alpha - 1, -alpha);\r\n            if (evaluation > alpha && evaluation < beta)\r\n                evaluation = -1 * this.findBestMove(canCancel, depth - 1, offset + 1, -beta, -alpha);\r\n\r\n            //let evaluation: number = -1 * this.findBestMove(canCancel, depth - 1, offset + 1, -beta, -alpha);\r\n\r\n            // unmake the move\r\n            this.unmakeMove(deltas);\r\n            this.boardHash = startingHash;\r\n            this.enPassantSquare = oldEnPassant;\r\n            this.castleStatus = oldCastleStatus;\r\n\r\n            // calc alpha & beta\r\n            if (evaluation >= beta) {\r\n                this.savedEvaluations[hashString] = { totalMoves: 0, depth: depth, bestMove: bestMoveForThisPosition, type: SavedEvalTypes.Beta, eval: beta };\r\n                return beta;\r\n            }\r\n            if (evaluation > alpha) { // best move found\r\n                bestMoveForThisPosition = validMoves[i];\r\n                alpha = evaluation;\r\n                savingType = SavedEvalTypes.Exact;\r\n\r\n                if (offset == 0) {\r\n                    this.movesFoundThisIteration.push({\r\n                        from: bestMoveForThisPosition.from,\r\n                        to: bestMoveForThisPosition.to,\r\n                        data: bestMoveForThisPosition.data,\r\n                        piece: this.board[bestMoveForThisPosition.from],\r\n                        capture: this.board[bestMoveForThisPosition.to] != Piece.Empty,\r\n                        eval: this.whiteTurn ? evaluation : -1 * evaluation\r\n                    });\r\n                    this.evalBestMoveThisIteration = bestMoveForThisPosition;\r\n                    this.evalBestMoveThisIteration.score = evaluation;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.savedEvaluations[hashString] = { totalMoves: 0, depth: depth, bestMove: bestMoveForThisPosition, type: savingType, eval: alpha };\r\n        return alpha;\r\n    }\r\n\r\n    // search until the position is 'quiet' (no captures remaining)\r\n    quiescenceSearch(alpha: number, beta: number) {\r\n        let evaluation: number = this.evaluate(); // evaluate first to prevent forcing a bad capture when there may have been better non capture moves\r\n        if (evaluation >= beta)\r\n            return beta;\r\n        if (evaluation > alpha)\r\n            alpha = evaluation;\r\n\r\n        const attackedSquares = this.getAttackedSquares(this.whiteTurn, -1);\r\n        const validMoves = this.getAllValidMoves(true, attackedSquares);\r\n        this.predictAndOrderMoves(validMoves, attackedSquares);\r\n\r\n        const oldEnPassant = this.enPassantSquare;\r\n        const length = validMoves.length;\r\n        for (let i = 0; i < length; i++) {\r\n            // make the move (todo: move to function)\r\n            // dont update hash because it isn't relevant here\r\n            this.forceMakeMove(validMoves[i].from, { index: validMoves[i].to, data: validMoves[i].data }, false);\r\n            const deltas = this.boardDelta;\r\n            this.boardDelta = [];\r\n            this.whiteTurn = !this.whiteTurn;\r\n\r\n            // evaluation = -1 * this.quiescenceSearch(-alpha - 1, -alpha);\r\n            // if (evaluation > alpha && evaluation < beta)\r\n            //     evaluation = -1 * this.quiescenceSearch(-beta, -alpha);\r\n\r\n            evaluation = -1 * this.quiescenceSearch(-beta, -alpha);\r\n\r\n            // unmake the move\r\n            this.unmakeMove(deltas);\r\n            this.enPassantSquare = oldEnPassant;\r\n\r\n            if (evaluation >= beta)\r\n                return beta;\r\n            if (evaluation > alpha)\r\n                alpha = evaluation;\r\n        }\r\n\r\n        return alpha;\r\n    }\r\n\r\n    calculateAllPossibleMoves = (depth: number) => {\r\n        if (depth <= 0)\r\n            return 1;\r\n\r\n        const hashString = this.boardHash.toString();\r\n        if (hashString in this.savedEvaluations && this.savedEvaluations[hashString].depth == depth)\r\n            return this.savedEvaluations[hashString].totalMoves;\r\n\r\n        const validMoves = this.getAllValidMoves();\r\n        let totalMoves = 0;\r\n\r\n        const startingHash = this.boardHash;\r\n        const oldEnPassant = this.enPassantSquare;\r\n        const oldCastleStatus = this.castleStatus;\r\n        const validLength = validMoves.length;\r\n        for (let i = 0; i < validLength; i++) { \r\n            this.updateCastleStatus(validMoves[i].from, validMoves[i].to);\r\n            this.forceMakeMove(validMoves[i].from, { index: validMoves[i].to, data: validMoves[i].data }, false);\r\n            const deltas = this.boardDelta;\r\n            this.boardDelta = [];\r\n            this.whiteTurn = !this.whiteTurn;\r\n            this.boardHash = this.updateHash(deltas, startingHash, oldEnPassant, oldCastleStatus);\r\n\r\n            totalMoves += this.calculateAllPossibleMoves(depth - 1);\r\n\r\n            this.unmakeMove(deltas);\r\n            this.boardHash = startingHash;\r\n            this.enPassantSquare = oldEnPassant;\r\n            this.castleStatus = oldCastleStatus;\r\n        }\r\n\r\n        this.savedEvaluations[hashString] = { totalMoves: totalMoves, depth: depth, eval: 0, type: SavedEvalTypes.Exact, bestMove: { from: -1, to: -1, data: 0, score: 0 } };\r\n        return totalMoves;\r\n    }\r\n\r\n    randomBotMove = () => {\r\n        if (this.historicalIndex != 0)\r\n            return;\r\n\r\n        const moveIndex = Math.floor(Math.random() * this.allValidMoves.length);\r\n        const move = this.allValidMoves[moveIndex];\r\n\r\n        this.updateCastleStatus(move.from, move.to);\r\n        this.forceMakeMove(move.from, { index: move.to, data: move.data }, true);\r\n    }\r\n\r\n    evalBotMove = (depth: number) => {\r\n        if (this.historicalIndex != 0)\r\n            return;\r\n\r\n        if (this.checkForDraw())\r\n            return;\r\n\r\n        const startTime = self.performance.now();\r\n\r\n        this.movesFoundThisIteration = [];\r\n        this.movesFoundThisTurn = [];\r\n        \r\n        const lastMove = this.evalBestMove;\r\n        this.findBestMove(false, depth, 0, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n        if (lastMove.to == this.evalBestMoveThisIteration.to && lastMove.from == this.evalBestMoveThisIteration.from) {\r\n            console.log(\"Attempting to make the same move: \" + lastMove.toString());\r\n            return;\r\n        } else {\r\n            this.evalBestMove = this.evalBestMoveThisIteration;\r\n        }\r\n\r\n        this.movesFoundThisTurn = this.movesFoundThisIteration;\r\n        this.depthSearchedThisTurn = depth;\r\n        this.castledThisTurn = this.updateCastleStatus(this.evalBestMove.from, this.evalBestMove.to);\r\n        this.pieceCapturedThisTurn = this.board[this.evalBestMove.to] != Piece.Empty;\r\n        this.forceMakeMove(this.evalBestMove.from, { index: this.evalBestMove.to, data: this.evalBestMove.data }, true);\r\n\r\n        const endTime = self.performance.now();\r\n        this.timeTakenLastTurn = endTime - startTime; // ms\r\n    }\r\n\r\n    evalBotMoveIterative = () => {\r\n        if (this.historicalIndex != 0)\r\n            return;\r\n\r\n        if (this.checkForDraw())\r\n            return;\r\n\r\n        const startTime = self.performance.now();\r\n\r\n        this.movesFoundThisIteration = [];\r\n        this.movesFoundThisTurn = [];\r\n\r\n        const lastMove = {...this.evalBestMove};\r\n        engine.findBestMoveWithIterativeDeepening();\r\n        if (lastMove.to == this.evalBestMove.to && lastMove.from == this.evalBestMove.from) {\r\n            console.log(\"Attempting to make the same move: \" + lastMove.toString());\r\n            return;\r\n        }\r\n\r\n        this.castledThisTurn = this.updateCastleStatus(this.evalBestMove.from, this.evalBestMove.to);\r\n        this.pieceCapturedThisTurn = this.board[this.evalBestMove.to] != Piece.Empty;\r\n        this.forceMakeMove(this.evalBestMove.from, { index: this.evalBestMove.to, data: this.evalBestMove.data }, true);\r\n\r\n        const endTime = self.performance.now();\r\n        this.timeTakenLastTurn = endTime - startTime; // ms\r\n    }\r\n\r\n    attemptMove = (fromIndex: number, toIndex: number) => {\r\n        const movingPiece = this.board[fromIndex];\r\n\r\n        // do not allow moves when looking back\r\n        if (this.historicalIndex != 0)\r\n            return false;\r\n\r\n        if (this.checkForDraw())\r\n            return false;\r\n\r\n        // no-op moves\r\n        if (fromIndex == toIndex || movingPiece == Piece.Empty)\r\n            return false;\r\n\r\n        // only move correct color pieces on correct turn\r\n        if ((this.whiteTurn && movingPiece < Piece.King_W) || (!this.whiteTurn && movingPiece > Piece.Pawn_B))\r\n            return false;\r\n\r\n        const validMoves = this.getAllValidMoves();\r\n        if (!validMoves.some(e => e.from == fromIndex && e.to == toIndex))\r\n            return false;\r\n\r\n        this.castledThisTurn = this.updateCastleStatus(fromIndex, toIndex);\r\n        this.pieceCapturedThisTurn = this.board[toIndex] != Piece.Empty; // todo: en passant capture noise doesn't work with this\r\n        this.forceMakeMove(fromIndex, { index: toIndex, data: this.whiteTurn ? Piece.Queen_W : Piece.Queen_B }, true); // auto promote to queen when possible\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nconst engine = new Engine();\r\n\r\nctx.addEventListener(\"message\", (e) => {\r\n    switch (e.data.command) {\r\n        case EngineCommands.RetrieveBoard:\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                board: engine.board,\r\n                validMoves: engine.allValidMoves\r\n            });\r\n            break;\r\n        case EngineCommands.AttemptMove:\r\n        {\r\n            const result = engine.attemptMove(e.data.fromIndex, e.data.toIndex);\r\n            const inCheck = result ? engine.isInCheck(engine.whiteTurn) : false;\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                from: e.data.fromIndex,\r\n                to: e.data.toIndex,\r\n                whiteTurn: engine.whiteTurn,\r\n                board: result ? engine.historicalBoards[engine.historicalBoards.length - 1] : undefined,\r\n                validMoves: engine.allValidMoves,\r\n                inCheck: inCheck,\r\n                captured: engine.pieceCapturedThisTurn,\r\n                castled: engine.castledThisTurn,\r\n                draw: engine.checkForDraw()\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.HistoryGoBack:\r\n        {\r\n            engine.stepBack();\r\n            const index = engine.historicalBoards.length - 1 + engine.historicalIndex;\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                board: engine.historicalBoards[index],\r\n                index: index\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.HistoryGoForward:\r\n        {\r\n            engine.stepForward();\r\n            const index = engine.historicalBoards.length - 1 + engine.historicalIndex;\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                board: engine.historicalBoards[index],\r\n                index: index\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.UndoMove:\r\n        {\r\n            if (engine.historicalIndex == 0) {\r\n                engine.undoMove();\r\n                const index = engine.historicalBoards.length - 1;\r\n                ctx.postMessage({\r\n                    command: e.data.command,\r\n                    board: engine.historicalBoards[index],\r\n                    index: index\r\n                });\r\n            }\r\n            break;\r\n        }\r\n        case EngineCommands.BotBestMove:\r\n        {\r\n            engine.evalBotMove(6);\r\n            const inCheck = engine.isInCheck(engine.whiteTurn);\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                from: engine.evalBestMove.from,\r\n                to: engine.evalBestMove.to,\r\n                timeTaken: engine.timeTakenLastTurn,\r\n                depthSearched: engine.depthSearchedThisTurn,\r\n                movesFound: engine.movesFoundThisTurn,\r\n                whiteTurn: engine.whiteTurn,\r\n                board: engine.historicalBoards[engine.historicalBoards.length - 1],\r\n                validMoves: engine.allValidMoves,\r\n                inCheck: inCheck,\r\n                captured: engine.pieceCapturedThisTurn,\r\n                castled: engine.castledThisTurn,\r\n                draw: engine.checkForDraw()\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.BotBestMoveIterative:\r\n        {\r\n            engine.evalBotMoveIterative();\r\n            const inCheck = engine.isInCheck(engine.whiteTurn);\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                from: engine.evalBestMove.from,\r\n                to: engine.evalBestMove.to,\r\n                timeTaken: engine.timeTakenLastTurn,\r\n                depthSearched: engine.depthSearchedThisTurn,\r\n                movesFound: engine.movesFoundThisTurn,\r\n                whiteTurn: engine.whiteTurn,\r\n                board: engine.historicalBoards[engine.historicalBoards.length - 1],\r\n                validMoves: engine.allValidMoves,\r\n                inCheck: inCheck,\r\n                captured: engine.pieceCapturedThisTurn,\r\n                castled: engine.castledThisTurn,\r\n                draw: engine.checkForDraw()\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.RetrievePieceLocations:\r\n            ctx.postMessage({ command: e.data.command, locations: engine.pieceLocations });\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(212);\n"],"sourceRoot":""}