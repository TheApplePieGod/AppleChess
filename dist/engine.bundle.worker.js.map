{"version":3,"sources":["webpack://bandersnatch/./src/definitions.ts","webpack://bandersnatch/./src/engine/engine.ts","webpack://bandersnatch/./node_modules/big-integer/BigInteger.js","webpack://bandersnatch/webpack/bootstrap","webpack://bandersnatch/webpack/runtime/node module decorator","webpack://bandersnatch/webpack/startup"],"names":["Piece","Sounds","EvalCommands","EngineCommands","Value","getPieceName","piece","Pawn_W","Pawn_B","Knight_W","Knight_B","Bishop_W","Bishop_B","Rook_W","Rook_B","Queen_W","Queen_B","King_W","King_B","getPieceNameShort","notationToIndex","rank","file","charCodeAt","indexToNotation","index","y","Math","floor","x","String","fromCharCode","pawnSquareTable","knightSquareTable","bishopSquareTable","rookSquareTable","queenSquareTable","kingMiddleGameSquareTable","kingEndGameSquareTable","ctx","self","SavedEvalTypes","CastleStatus","Engine","boardSize","board","boardDelta","boardHash","BigInt","zobristHashTable","savedEvaluations","evalBestMove","from","to","data","score","evalBestMoveThisIteration","movesFoundThisTurn","movesFoundThisIteration","repetitionHistory","searchStartTime","searchMaxTime","pieceCapturedThisTurn","castledThisTurn","timeTakenLastTurn","depthSearchedThisTurn","pieceLocations","moveCount","moveRepCount","pinnedPieces","historicalBoards","historicalIndex","whiteTurn","castleStatus","enPassantSquare","allValidMoves","fenToPieceDict","startingMaterialWithoutPawns","Bishop","Knight","Rook","Queen","startingMaterial","Pawn","this","endgameMaterialThreshold","createHistoricalBoard","newPieceLocations","i","length","useHistoricalBoard","historicalBoard","hashBoard","getAllValidMoves","stepBack","abs","stepForward","undoMove","pop","hash","Empty","j","WhiteKing","WhiteQueen","BlackKing","BlackQueen","parseFEN","fenString","push","fields","split","ranks","boardIndex","r","terms","t","numberVal","parseInt","isNaN","includes","traceValidSquares","slopeX","slopeY","white","onlyEmpty","updatePins","inArray","currentIndex","xyMax","obstructed","obstructedIndex","getValidSquares","attackOnly","isWhite","min","max","offset","startY","xMin","xMax","yMin","yMax","getAttackedSquares","toIndex","attackedSquares","endIndex","getValidCastleSquares","traced","isInCheck","attacked","isInCheckAttackedSquares","capturesOnly","baseAttackedSquares","allValid","inCheck","startIndex","location","valid","isPinned","validLength","k","pieceBackup","backup2","finishTurn","forceMakeMove","fromIndex","move","movingPiece","capturedPiece","target","promoted","splice","indexOf","unmakeMove","deltas","foundIndex","updateCastleStatus","castled","updateHash","delta","oldEnPassant","oldCastleStatus","newHash","pos","newPiece","getPieceCount","pieceCount","checkForDraw","count","readSquareTableValue","table","evaluateSquareTable","value","positions","evaluateSquareTables","endgameWeight","evaluateEndgamePosition","opponentKingX","opponentKingY","distance","evaluatePawnStructure","pawnList","protectedLeft","protectedRight","evaluate","whiteMaterial","countMaterial","blackMaterial","whiteMaterialWithoutPawns","getPieceValue","blackMaterialWithoutPawns","whiteEndgameWeight","blackEndgameWeight","whiteEval","blackEval","whiteX","whiteY","blackX","blackY","distanceBetween","evaluation","predictAndOrderMoves","moves","storedMove","movesLength","capturingPiece","promoting","undefined","sort","a","b","findBestMoveWithIterativeDeepening","Date","now","lastCompletedDepth","performance","findBestMove","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","postMessage","command","ReceiveCurrentEval","eval","canCancel","depth","alpha","beta","quiescenceSearch","hashString","toString","savedEval","bestMove","finalScore","shouldReturn","type","Exact","Alpha","Beta","validMoves","startingHash","bestMoveForThisPosition","savingType","totalMoves","capture","calculateAllPossibleMoves","randomBotMove","moveIndex","random","evalBotMove","startTime","lastMove","console","log","endTime","evalBotMoveIterative","engine","attemptMove","some","e","maxVal","pow","minus","randBetween","castleValues","enPassantSquares","addEventListener","RetrieveBoard","AttemptMove","result","captured","draw","HistoryGoBack","HistoryGoForward","UndoMove","BotBestMove","timeTaken","depthSearched","movesFound","BotBestMoveIterative","RetrievePieceLocations","locations","UpdateMaxMoveTime","time","BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","Integer","v","radix","alphabet","caseSensitive","parseValue","parseBase","BigInteger","sign","isSmall","SmallInteger","NativeBigInt","isPrecise","n","arrayToSmall","arr","trim","compareAbs","createArray","Array","truncate","ceil","add","sum","l_a","l_b","carry","base","addAny","addSmall","l","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","concat","multiplyKaratsuba","slice","d","c","ac","bd","abcd","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","Error","negate","comparison","quotientDigit","shift","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","unshift","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","prototype","Object","create","plus","subtractAny","small","multiply","l1","l2","times","_multiplyBySmall","divmod","over","_0","_1","_2","isNegative","exp","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","toJSNumber","isProbablePrime","iterations","rng","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","tmp","p","gcd","text","toLowerCase","absBase","alphabetValues","digits","start","parseBaseFromArray","val","toBase","apply","map","valueOf","neg","out","left","digit","toBaseString","stringify","join","parseStringValue","decimalPlace","test","parseNumberValue","toArray","str","toJSON","minusOne","lcm","isInstance","usedRNG","low","range","restricted","top","fromArray","module","hasOwnProperty","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","call","nmd","paths","children"],"mappings":"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","file":"engine.bundle.worker.js","sourcesContent":["export enum Piece {\r\n    Empty = 0,\r\n    King_B = 1,\r\n    Queen_B = 2,\r\n    Rook_B = 3,\r\n    Bishop_B = 4,\r\n    Knight_B = 5,\r\n    Pawn_B = 6,\r\n    King_W = 7,\r\n    Queen_W = 8,\r\n    Rook_W = 9,\r\n    Bishop_W = 10,\r\n    Knight_W = 11,\r\n    Pawn_W = 12\r\n}\r\n\r\nexport enum Value {\r\n    Pawn = 100,\r\n    Knight = 300,\r\n    Bishop = 300,\r\n    Rook = 500,\r\n    Queen = 900\r\n}\r\n\r\nexport interface EvalMove {\r\n    from: number;\r\n    to: number;\r\n    data: number;\r\n    score: number;\r\n}\r\n\r\nexport interface HistoricalBoard {\r\n    board: number[];\r\n    whiteTurn: boolean;\r\n    castleStatus: number;\r\n    pieceLocations: number[][];\r\n    moveCount: number;\r\n    moveRepCount: number;\r\n    repetitionHistory: bigint[];\r\n}\r\n\r\nexport interface DebugMoveOutput {\r\n    move: EvalMove;\r\n    piece: number;\r\n    capture: boolean;\r\n}\r\n\r\nexport enum EngineCommands {\r\n    None = 0,\r\n    RetrieveBoard = 1,\r\n    AttemptMove = 2,\r\n    HistoryGoBack = 3,\r\n    HistoryGoForward = 4,\r\n    BotBestMove = 5,\r\n    BotBestMoveIterative = 6,\r\n    RetrievePieceLocations = 7,\r\n    ReceiveCurrentEval = 8,\r\n    UpdateEval = 9,\r\n    UndoMove = 10,\r\n    UpdateMaxMoveTime = 11,\r\n}\r\n\r\nexport enum EvalCommands {\r\n    ReceiveCurrentEval = 0,\r\n    UpdateState = 1,\r\n    Evaluate = 2,\r\n}\r\n\r\nexport enum Sounds {\r\n    None = 0,\r\n    PieceMoved = 1,\r\n    PieceCaptured = 2,\r\n    Checked = 3,\r\n    Castled = 4,\r\n    IllegalMove = 5,\r\n    GameOver = 6,\r\n    PieceMoved2 = 7\r\n}\r\n\r\nexport const getPieceName = (piece: number) => {\r\n    switch (piece) {\r\n        case Piece.Pawn_W:\r\n        case Piece.Pawn_B:\r\n            return \"Pawn\";\r\n        case Piece.Knight_W:\r\n        case Piece.Knight_B:\r\n            return \"Knight\";\r\n        case Piece.Bishop_W:\r\n        case Piece.Bishop_B:\r\n            return \"Bishop\";\r\n        case Piece.Rook_W:\r\n        case Piece.Rook_B:\r\n            return \"Rook\";\r\n        case Piece.Queen_W:\r\n        case Piece.Queen_B:\r\n            return \"Queen\";\r\n        case Piece.King_W:\r\n        case Piece.King_B:\r\n            return \"King\";\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\nexport const getPieceNameShort = (piece: number) => {\r\n    switch (piece) {\r\n        case Piece.Pawn_W:\r\n            return \"\";\r\n        case Piece.Pawn_B:\r\n            return \"\";\r\n        case Piece.Knight_W:\r\n            return \"N\";\r\n        case Piece.Knight_B:\r\n            return \"n\";\r\n        case Piece.Bishop_W:\r\n            return \"B\";\r\n        case Piece.Bishop_B:\r\n            return \"b\";\r\n        case Piece.Rook_W:\r\n            return \"R\";\r\n        case Piece.Rook_B:\r\n            return \"r\";\r\n        case Piece.Queen_W:\r\n            return \"Q\";\r\n        case Piece.Queen_B:\r\n            return \"q\";\r\n        case Piece.King_W:\r\n            return \"K\";\r\n        case Piece.King_B:\r\n            return \"k\";\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\nexport const notationToIndex = (rank: number, file: string) => {\r\n    const y = 8 - rank;\r\n    const x = file.charCodeAt(0) - 97;\r\n    return (y * 8) + x;\r\n}\r\n\r\nexport const indexToNotation = (index: number) => {\r\n    const y = Math.floor(index / 8);\r\n    const x = index % 8;\r\n    return `${String.fromCharCode(x + 97)}${8 - y}`;\r\n}\r\n\r\n// adapted from https://github.com/SebLague/Chess-AI/blob/main/Assets/Scripts/Core/PieceSquareTable.cs\r\nexport const pawnSquareTable: number[] = [\r\n    0,  0,  0,  0,  0,  0,  0,  0,\r\n    50, 50, 50, 50, 50, 50, 50, 50,\r\n    10, 10, 20, 30, 30, 20, 10, 10,\r\n    5,  5, 10, 25, 25, 10,  5,  5,\r\n    0,  0,  0, 20, 20,  0,  0,  0,\r\n    5, -5,-10,  0,  0,-10, -5,  5,\r\n    5, 10, 10,-20,-20, 10, 10,  5,\r\n    0,  0,  0,  0,  0,  0,  0,  0\r\n];\r\n\r\nexport const knightSquareTable: number[] = [\r\n    -50,-40,-30,-30,-30,-30,-40,-50,\r\n    -40,-20,  0,  0,  0,  0,-20,-40,\r\n    -30,  0, 10, 15, 15, 10,  0,-30,\r\n    -30,  5, 15, 20, 20, 15,  5,-30,\r\n    -30,  0, 15, 20, 20, 15,  0,-30,\r\n    -30,  5, 10, 15, 15, 10,  5,-30,\r\n    -40,-20,  0,  5,  5,  0,-20,-40,\r\n    -50,-40,-30,-30,-30,-30,-40,-50,\r\n];\r\n\r\nexport const bishopSquareTable: number[] = [\r\n    -20,-10,-10,-10,-10,-10,-10,-20,\r\n    -10,  0,  0,  0,  0,  0,  0,-10,\r\n    -10,  0,  5, 10, 10,  5,  0,-10,\r\n    -10,  5,  5, 10, 10,  5,  5,-10,\r\n    -10,  0, 10, 10, 10, 10,  0,-10,\r\n    -10, 10, 10, 10, 10, 10, 10,-10,\r\n    -10,  5,  0,  0,  0,  0,  5,-10,\r\n    -20,-10,-10,-10,-10,-10,-10,-20,\r\n];\r\n\r\nexport const rookSquareTable: number[] = [\r\n    0,  0,  0,  0,  0,  0,  0,  0,\r\n    5, 10, 10, 10, 10, 10, 10,  5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    -5,  0,  0,  0,  0,  0,  0, -5,\r\n    0,  0,  0,  5,  5,  0,  0,  0\r\n];\r\n\r\nexport const queenSquareTable: number[] = [\r\n    -20,-10,-10, -5, -5,-10,-10,-20,\r\n    -10,  0,  0,  0,  0,  0,  0,-10,\r\n    -10,  0,  5,  5,  5,  5,  0,-10,\r\n    -5,  0,  5,  5,  5,  5,  0, -5,\r\n    0,  0,  5,  5,  5,  5,  0, -5,\r\n    -10,  5,  5,  5,  5,  5,  0,-10,\r\n    -10,  0,  5,  0,  0,  0,  0,-10,\r\n    -20,-10,-10, -5, -5,-10,-10,-20\r\n];\r\n\r\nexport const kingMiddleGameSquareTable: number[] = [\r\n    -30,-40,-40,-50,-50,-40,-40,-30,\r\n    -30,-40,-40,-50,-50,-40,-40,-30,\r\n    -30,-40,-40,-50,-50,-40,-40,-30,\r\n    -30,-40,-40,-50,-50,-40,-40,-30,\r\n    -20,-30,-30,-40,-40,-30,-30,-20,\r\n    -10,-20,-20,-20,-20,-20,-20,-10,\r\n    20, 20,  0,  0,  0,  0, 20, 20,\r\n    20, 30, 10,  0,  0, 10, 30, 20\r\n];\r\n\r\nexport const kingEndGameSquareTable: number[] = [\r\n    -50,-40,-30,-20,-20,-30,-40,-50,\r\n    -30,-20,-10,  0,  0,-10,-20,-30,\r\n    -30,-10, 20, 30, 30, 20,-10,-30,\r\n    -30,-10, 30, 40, 40, 30,-10,-30,\r\n    -30,-10, 30, 40, 40, 30,-10,-30,\r\n    -30,-10, 20, 30, 30, 20,-10,-30,\r\n    -30,-30,  0,  0,  0,  0,-30,-30,\r\n    -50,-30,-30,-30,-30,-30,-30,-50\r\n];","import bigInt from \"big-integer\";\r\nimport { bishopSquareTable, knightSquareTable, pawnSquareTable, Piece, queenSquareTable, rookSquareTable, Value, getPieceName, EvalMove, EngineCommands, kingMiddleGameSquareTable, EvalCommands, HistoricalBoard, DebugMoveOutput, notationToIndex } from \"../definitions\";\r\n\r\n// We alias self to ctx and give it our newly created type\r\nconst ctx: Worker = self as any;\r\n\r\ninterface BoardDelta { // set values to -1 to ignore\r\n    index: number;\r\n    piece: number;\r\n    target: number;\r\n}\r\n\r\ninterface MoveInfo {\r\n    index: number;\r\n    data: number;\r\n}\r\n\r\ninterface EvaluationData {\r\n    totalMoves: number;\r\n    eval: number;\r\n    bestMove: EvalMove;\r\n    depth: number;\r\n    type: number;\r\n}\r\n\r\nenum SavedEvalTypes {\r\n    Exact = 0,\r\n    Alpha = 1,\r\n    Beta = 2\r\n}\r\n\r\nenum CastleStatus { // kingside / queenside\r\n    WhiteKing = 1,\r\n    WhiteQueen = 2,\r\n    BlackKing = 4,\r\n    BlackQueen = 8\r\n}\r\n\r\nexport class Engine {\r\n    boardSize = 8;\r\n    board: number[] = [];\r\n    boardDelta: BoardDelta[] = [];\r\n    boardHash: bigint = BigInt(0);\r\n\r\n    zobristHashTable: bigint[][] = [];\r\n    savedEvaluations: Record<string, EvaluationData> = {};\r\n    evalBestMove: EvalMove = { from: -1, to: -1, data: 0, score: 0 };\r\n    evalBestMoveThisIteration: EvalMove = { from: -1, to: -1, data: 0, score: 0 };\r\n    movesFoundThisTurn: DebugMoveOutput[] = [];\r\n    movesFoundThisIteration: DebugMoveOutput[] = [];\r\n    repetitionHistory: bigint[] = [];\r\n\r\n    searchStartTime = 0;\r\n    searchMaxTime = 3000;\r\n\r\n    pieceCapturedThisTurn = false;\r\n    castledThisTurn = false;\r\n    timeTakenLastTurn = 0;\r\n    depthSearchedThisTurn = 0;\r\n\r\n    pieceLocations: number[][] = [\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n    ]\r\n\r\n    moveCount = 0;\r\n    moveRepCount = 0;\r\n    pinnedPieces: number[] = [];\r\n    historicalBoards: HistoricalBoard[] = [];\r\n    historicalIndex = 0;\r\n    whiteTurn = true;\r\n    castleStatus = 0;\r\n    enPassantSquare = -1;\r\n    allValidMoves: EvalMove[] = [];\r\n\r\n    fenToPieceDict: Record<string, number> = {\r\n        'K': Piece.King_W,\r\n        'Q': Piece.Queen_W,\r\n        'R': Piece.Rook_W,\r\n        'B': Piece.Bishop_W,\r\n        'N': Piece.Knight_W,\r\n        'P': Piece.Pawn_W,\r\n        'k': Piece.King_B,\r\n        'q': Piece.Queen_B,\r\n        'r': Piece.Rook_B,\r\n        'b': Piece.Bishop_B,\r\n        'n': Piece.Knight_B,\r\n        'p': Piece.Pawn_B\r\n    }\r\n    startingMaterialWithoutPawns = (Value.Bishop * 2) + (Value.Knight * 2) + (Value.Rook * 2) + Value.Queen;\r\n    startingMaterial = (Value.Pawn * 8) + this.startingMaterialWithoutPawns;\r\n    endgameMaterialThreshold = (Value.Rook * 2) + (Value.Bishop) + (Value.Knight);\r\n\r\n    constructor() {\r\n        this.board = [];\r\n\r\n        //https://docs.google.com/spreadsheets/d/1fWA-9QW-C8Dc-8LDrEemSligWcprkpKif6cNDs4V_mg/edit#gid=0\r\n        let startingFEN = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\r\n        //startingFEN = \"5ppp/4Ppkp/5ppp/8/6q1/5P2/1K6/8 w - - 0 1\"; // king in a box\r\n        //startingFEN = \"1rk4r/1pp3pp/p2b4/1n3P2/6P1/2nK4/7P/8 b - - 0 1\"; // promotion break\r\n        //startingFEN = \"r3kb1r/ppp1pppp/2n5/6B1/4P1n1/2N5/PPP2PPP/R2K2NR w - - 0 1\"; // fork\r\n        //startingFEN = \"rr2kb2/ppp1pppp/2n3n1/7B/B7/2N5/PPP2PPP/R2KR1N1 b - - 0 1\"; // pins\r\n        //startingFEN = \"2N5/4k2p/p3pp2/6p1/8/P4n1P/4r3/1K1R4 b - - 0 1\"; // threefold test\r\n        //startingFEN = \"8/8/1N4R1/4p3/2P5/2k2n1P/5r2/2K5 w - - 0 1\"; // real threefold\r\n        //startingFEN = \"3r4/3r4/3k4/8/8/3K4/8/8 w - - 0 1\"; // one sided rook endgame\r\n        //startingFEN = \"6k1/5p2/6p1/8/7p/8/6PP/6K1 b - - 0 0\"; // hard pawn endgame\r\n        //startingFEN = \"4R3/1k6/1p2P1p1/p7/4r3/1P1r4/1K6/2R5 w - - 0 0\"; // 4 rooks endgame\r\n        //startingFEN = \"r2qr1k1/1p1b1pp1/3p1b1p/3p4/p2NPPP1/4B3/PPPQ2P1/3RR1K1 w - - 0 1\"; // pawn structure test\r\n        //startingFEN = \"r1b1kb1r/p2pqppp/2p2n2/4N3/1pBnP3/2N5/PPPP1PPP/R1BQ1RK1 w kq - 0 1\"; // PVSearch test\r\n        //startingFEN = \"8/2p5/8/KP5r/8/8/8/7k b - - 0 1\"; // en passant pin test\r\n        //startingFEN = \"8/k7/3p4/p2P1p2/P2P1P2/8/8/K7 w - - 0 1\"; // hard endgame draw test\r\n\r\n        // initialize the hash table (0-63)\r\n        const maxVal: bigInt.BigNumber = bigInt(2).pow(64).minus(1);\r\n        for (let i = 0; i < 64; i++) {\r\n            this.zobristHashTable.push([]);\r\n            for (let j = 0; j < 12; j++) {\r\n                this.zobristHashTable[i].push(BigInt(bigInt.randBetween(0, maxVal)));\r\n            }\r\n        }\r\n\r\n        // castle values (64)\r\n        let castleValues: bigint[] = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            castleValues.push(BigInt(bigInt.randBetween(0, maxVal)));\r\n        }\r\n        this.zobristHashTable.push(castleValues);\r\n        \r\n        // turn (65)\r\n        this.zobristHashTable.push([BigInt(bigInt.randBetween(0, maxVal))]);\r\n\r\n        // en passant (66)\r\n        let enPassantSquares: bigint[] = [];\r\n        for (let i = 0; i < 64; i++) {\r\n            enPassantSquares.push(BigInt(bigInt.randBetween(0, maxVal)));\r\n        }\r\n        this.zobristHashTable.push(enPassantSquares);\r\n\r\n        this.board = this.parseFEN(startingFEN);\r\n        this.boardHash = this.hashBoard();\r\n        this.repetitionHistory.push(this.boardHash);\r\n        this.historicalBoards.push(this.createHistoricalBoard());\r\n        this.allValidMoves = this.getAllValidMoves();\r\n    }\r\n\r\n    createHistoricalBoard = () => {\r\n        let newPieceLocations: number[][] = [...this.pieceLocations]\r\n        for (let i = 0; i < newPieceLocations.length; i++) {\r\n            newPieceLocations[i] = [...newPieceLocations[i]]\r\n        }\r\n        \r\n        return ({\r\n            board:  [...this.board],\r\n            whiteTurn: this.whiteTurn,\r\n            castleStatus: this.castleStatus,\r\n            pieceLocations: newPieceLocations,\r\n            moveCount: this.moveCount,\r\n            moveRepCount: this.moveRepCount,\r\n            repetitionHistory: [...this.repetitionHistory]\r\n        });\r\n    }\r\n\r\n    useHistoricalBoard = (historicalBoard: HistoricalBoard) => {\r\n        this.board = [...historicalBoard.board];\r\n        this.whiteTurn = historicalBoard.whiteTurn;\r\n        this.castleStatus = historicalBoard.castleStatus;\r\n        this.pieceLocations = [...historicalBoard.pieceLocations];\r\n        for (let i = 0; i < this.pieceLocations.length; i++) {\r\n            this.pieceLocations[i] = [...this.pieceLocations[i]]\r\n        }\r\n        this.moveCount = historicalBoard.moveCount;\r\n        this.moveRepCount = historicalBoard.moveRepCount;\r\n        this.repetitionHistory = [...historicalBoard.repetitionHistory];\r\n        this.boardHash = this.hashBoard();\r\n        this.savedEvaluations = {};\r\n        this.evalBestMove = {} as EvalMove;\r\n        this.movesFoundThisTurn = [];\r\n        this.allValidMoves = this.getAllValidMoves();\r\n    }\r\n\r\n    stepBack = () => {\r\n        if (Math.abs(this.historicalIndex) < this.historicalBoards.length - 1) {\r\n            this.historicalIndex--;\r\n\r\n            const historicalBoard = this.historicalBoards[this.historicalBoards.length - 1 + this.historicalIndex];\r\n            this.useHistoricalBoard(historicalBoard);\r\n        }\r\n    }\r\n\r\n    stepForward = () => {\r\n        if (this.historicalIndex < 0) {\r\n            this.historicalIndex++;\r\n            const historicalBoard = this.historicalBoards[this.historicalBoards.length - 1 + this.historicalIndex];\r\n            this.useHistoricalBoard(historicalBoard);\r\n        }\r\n    }\r\n\r\n    undoMove = () => {\r\n        if (this.historicalBoards.length > 1 && this.historicalIndex == 0) {\r\n            this.historicalIndex = 0;\r\n            const historicalBoard = this.historicalBoards[this.historicalBoards.length - 2];\r\n            this.useHistoricalBoard(historicalBoard);\r\n            this.historicalBoards.pop();\r\n        }\r\n    }\r\n\r\n    hashBoard = () => {\r\n        let hash = BigInt(0);\r\n        \r\n        // board values\r\n        for (let i = 0; i < this.board.length; i++) {\r\n            if (this.board[i] != Piece.Empty) {\r\n                const j = this.board[i] - 1;\r\n                hash = hash ^ this.zobristHashTable[i][j];\r\n            }\r\n        }\r\n\r\n        // castle values\r\n        if ((this.castleStatus & CastleStatus.WhiteKing))\r\n            hash = hash ^ this.zobristHashTable[64][0];\r\n        if ((this.castleStatus & CastleStatus.WhiteQueen))\r\n            hash = hash ^ this.zobristHashTable[64][1];\r\n        if ((this.castleStatus & CastleStatus.BlackKing))\r\n            hash = hash ^ this.zobristHashTable[64][2];\r\n        if ((this.castleStatus & CastleStatus.BlackQueen))\r\n            hash = hash ^ this.zobristHashTable[64][3];\r\n\r\n        // turn\r\n        if (this.whiteTurn)\r\n            hash = hash ^ this.zobristHashTable[65][0];\r\n\r\n        // en passant\r\n        if (this.enPassantSquare != -1)\r\n            hash = hash ^ this.zobristHashTable[66][this.enPassantSquare];\r\n\r\n        return hash;\r\n    }\r\n\r\n    parseFEN = (fenString: string) => {\r\n        let board: number[] = [];\r\n        for (let i = 0; i < this.boardSize * this.boardSize; i++) {\r\n            board.push(Piece.Empty);\r\n        }\r\n\r\n        const fields = fenString.split(' ');\r\n        const ranks = fields[0].split('/');\r\n\r\n        let boardIndex = 0;\r\n        for (let r = 0; r < ranks.length; r++) {\r\n            const terms = ranks[r].split('');\r\n            for (let t = 0; t < terms.length; t++) {\r\n                const numberVal = parseInt(terms[t]);\r\n                if (isNaN(numberVal)) {\r\n                    const piece = this.fenToPieceDict[terms[t]];\r\n                    board[boardIndex] = piece;\r\n\r\n                    this.pieceLocations[piece].push(boardIndex);\r\n\r\n                    boardIndex++;\r\n                }\r\n                else\r\n                    boardIndex += numberVal;\r\n            }\r\n        }\r\n\r\n        this.whiteTurn = fields[1] == 'w';\r\n        this.castleStatus = 0;\r\n\r\n        if (fields[2].includes('K'))\r\n            this.castleStatus |= CastleStatus.WhiteKing;\r\n        if (fields[2].includes('Q'))\r\n            this.castleStatus |= CastleStatus.WhiteQueen;\r\n        if (fields[2].includes('k'))\r\n            this.castleStatus |= CastleStatus.BlackKing;\r\n        if (fields[2].includes('q'))\r\n            this.castleStatus |= CastleStatus.BlackQueen;\r\n\r\n        if (fields[3] != '-')\r\n            this.enPassantSquare = notationToIndex(parseInt(fields[3][1]), fields[3][0]);\r\n\r\n        this.moveRepCount = parseInt(fields[4]);\r\n\r\n        this.moveCount = parseInt(fields[5]) * 2 - 2;\r\n\r\n        return board;\r\n    }\r\n\r\n    traceValidSquares = (index: number, slopeX: number, slopeY: number, white: boolean, onlyEmpty: boolean, updatePins: boolean, x: number, y: number, inArray: number[]) => {\r\n        let currentIndex = index;\r\n        const xyMax = this.boardSize - 1;\r\n        const length = this.board.length;\r\n\r\n        let obstructed = false;\r\n        let obstructedIndex = 0;\r\n        while (currentIndex >= 0 && currentIndex < length) {\r\n            if (currentIndex != index) {\r\n                if (!obstructed) {\r\n                    if (onlyEmpty) {\r\n                        if (this.board[currentIndex] == Piece.Empty)\r\n                            inArray.push(currentIndex);\r\n                        else\r\n                            break;\r\n                    } else if (this.board[currentIndex] == Piece.Empty || (white && this.board[currentIndex] < 7) || (!white && this.board[currentIndex] >= 7)) {\r\n                        inArray.push(currentIndex);\r\n                    }\r\n                    obstructed = this.board[currentIndex] != Piece.Empty;\r\n                    obstructedIndex = currentIndex;\r\n                }\r\n                else if (updatePins) {\r\n                    // if we are tracing a white piece, look for a black piece blocking the way of the black king\r\n                    if (this.board[currentIndex] == Piece.King_W || this.board[currentIndex] == Piece.King_B || this.board[currentIndex] == Piece.Empty) {\r\n                        if (white && this.board[currentIndex] == Piece.King_B && this.board[obstructedIndex] < 7) {\r\n                            this.pinnedPieces.push(obstructedIndex);\r\n                            break;\r\n                        }\r\n                        else if (!white && this.board[currentIndex] == Piece.King_W && this.board[obstructedIndex] >= 7) {\r\n                            this.pinnedPieces.push(obstructedIndex);\r\n                            break;\r\n                        }\r\n                    } else {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (slopeX == -1 && x == 0)\r\n                break;\r\n            if (slopeX == 1 && x == xyMax)\r\n                break;\r\n            if (slopeY == -1 && y == 0)\r\n                break;\r\n            if (slopeY == 1 && y == xyMax)\r\n                break;\r\n\r\n            x += slopeX;\r\n            y += slopeY;\r\n            currentIndex += slopeX + (slopeY * this.boardSize);\r\n        }\r\n    }\r\n\r\n    getValidSquares = (index: number, piece: number, attackOnly: boolean, updatePins: boolean,inArray: number[]) => {\r\n        const x = index % this.boardSize;\r\n        const y = (index / this.boardSize) << 0;\r\n        const xyMax = this.boardSize - 1;\r\n\r\n        const isWhite = piece >= 7;\r\n        switch (piece) {\r\n            case Piece.Rook_W:\r\n            case Piece.Rook_B:\r\n                this.traceValidSquares(index, 1, 0, isWhite, false, updatePins, x, y, inArray); // right\r\n                this.traceValidSquares(index, -1, 0, isWhite, false, updatePins, x, y, inArray); // left\r\n                this.traceValidSquares(index, 0, 1, isWhite, false, updatePins, x, y, inArray); // down\r\n                this.traceValidSquares(index, 0, -1, isWhite, false, updatePins, x, y, inArray); // up\r\n                break;\r\n            case Piece.Queen_W:\r\n            case Piece.Queen_B:\r\n                this.traceValidSquares(index, 1, 0, isWhite, false, updatePins, x, y, inArray); // right\r\n                this.traceValidSquares(index, -1, 0, isWhite, false, updatePins, x, y, inArray); // left\r\n                this.traceValidSquares(index, 0, 1, isWhite, false, updatePins, x, y, inArray); // down\r\n                this.traceValidSquares(index, 0, -1, isWhite, false, updatePins, x, y, inArray); // up\r\n                this.traceValidSquares(index, 1, -1, isWhite, false, updatePins, x, y, inArray); // up right\r\n                this.traceValidSquares(index, -1, -1, isWhite, false, updatePins, x, y, inArray); // up left\r\n                this.traceValidSquares(index, 1, 1, isWhite, false, updatePins, x, y, inArray); // down right\r\n                this.traceValidSquares(index, -1, 1, isWhite, false, updatePins, x, y, inArray); // down left\r\n                break;\r\n            case Piece.Bishop_W:\r\n            case Piece.Bishop_B:\r\n                this.traceValidSquares(index, 1, -1, isWhite, false, updatePins, x, y, inArray); // up right\r\n                this.traceValidSquares(index, -1, -1, isWhite, false, updatePins, x, y, inArray); // up left\r\n                this.traceValidSquares(index, 1, 1, isWhite, false, updatePins, x, y, inArray); // down right\r\n                this.traceValidSquares(index, -1, 1, isWhite, false, updatePins, x, y, inArray); // down left\r\n                break;\r\n            case Piece.Pawn_W:\r\n            case Piece.Pawn_B:\r\n            {\r\n                let to = 0;\r\n                const min = isWhite ? 1 : 7;\r\n                const max = isWhite ? 6 : 12;\r\n                const offset = isWhite ? -8 : 8;\r\n                const startY = isWhite ? 6 : 1;\r\n                const xMin = x >= 1;\r\n                const xMax = x < xyMax;\r\n                \r\n                to = index + offset;     if (!attackOnly && (this.board[to] == Piece.Empty)) inArray.push(to);\r\n                to = index + offset * 2; if (!attackOnly && y == startY && (this.board[to] == Piece.Empty && this.board[to - offset] == Piece.Empty)) inArray.push(to);\r\n                to = index + offset + 1; if (xMax && (((attackOnly || this.board[to] != Piece.Empty) && (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) || to == this.enPassantSquare)) inArray.push(to);\r\n                to = index + offset - 1; if (xMin && (((attackOnly || this.board[to] != Piece.Empty) && (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) || to == this.enPassantSquare)) inArray.push(to);\r\n\r\n                break;\r\n            }\r\n            case Piece.King_W:\r\n            case Piece.King_B:\r\n            {\r\n                let to = 0;\r\n                const min = isWhite ? 1 : 7;\r\n                const max = isWhite ? 6 : 12;\r\n                const xMin = x >= 1;\r\n                const xMax = x < xyMax;\r\n                const yMin = y >= 1;\r\n                const yMax = y < xyMax;\r\n\r\n                to = index - 9; if (xMin && yMin && (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) inArray.push(to);\r\n                to = index - 8; if (yMin &&         (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) inArray.push(to);\r\n                to = index - 7; if (xMax && yMin && (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) inArray.push(to);\r\n                to = index - 1; if (xMin &&         (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) inArray.push(to);\r\n                to = index + 1; if (xMax &&         (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) inArray.push(to);\r\n                to = index + 7; if (xMin && yMax && (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) inArray.push(to);\r\n                to = index + 8; if (yMax &&         (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) inArray.push(to);\r\n                to = index + 9; if (xMax && yMax && (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max))) inArray.push(to);\r\n                \r\n                break;\r\n            }\r\n            case Piece.Knight_W:\r\n            case Piece.Knight_B:\r\n            {\r\n                let to = 0;\r\n                const min = isWhite ? 1 : 7;\r\n                const max = isWhite ? 6 : 12;\r\n                if (x >= 2) {\r\n                    if (y >= 1) {\r\n                        to = index - 10; if (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max)) inArray.push(to);\r\n                    }\r\n                    if (y <= xyMax - 1) {\r\n                        to = index + 6;  if (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max)) inArray.push(to);\r\n                    }\r\n                }\r\n                if (x <= xyMax - 2) {\r\n                    if (y <= xyMax - 1) {\r\n                        to = index + 10; if (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max)) inArray.push(to);\r\n                    }\r\n                    if (y >= 1) {\r\n                        to = index - 6;  if (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max)) inArray.push(to);\r\n                    }\r\n                }\r\n                if (y >= 2) {\r\n                    if (x >= 1) {\r\n                        to = index - 17; if (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max)) inArray.push(to);\r\n                    }\r\n                    if (x <= xyMax - 1) {\r\n                        to = index - 15; if (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max)) inArray.push(to);\r\n                    }\r\n                }\r\n                if (y <= xyMax - 2) {\r\n                    if (x <= xyMax - 1) {\r\n                        to = index + 17; if (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max)) inArray.push(to);\r\n                    }\r\n                    if (x >= 1) {\r\n                        to = index + 15; if (this.board[to] == Piece.Empty || (this.board[to] >= min && this.board[to] <= max)) inArray.push(to);\r\n                    }\r\n                }\r\n                \r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getAttackedSquares = (white: boolean, toIndex: number, updatePins: boolean = false) => {\r\n        let attackedSquares: number[] = [];\r\n\r\n        const startIndex = white ? 1 : 7;\r\n        const endIndex = white ? 6 : 12;\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n            const length = this.pieceLocations[i].length;\r\n            for (let j = 0; j < length; j++) {\r\n                if (this.pieceLocations[i][j] == toIndex) // when searching for valid moves, instead of modifying the piece dictionaries, just ignore any piece that would have been captured\r\n                    continue;\r\n                this.getValidSquares(this.pieceLocations[i][j], i, true, updatePins, attackedSquares);\r\n            }\r\n        }\r\n\r\n        return attackedSquares;\r\n    }\r\n\r\n    getValidCastleSquares = (attackedSquares: number[], inArray: EvalMove[]) => {\r\n        if (this.whiteTurn) {\r\n            let traced: number[] = [];\r\n            this.traceValidSquares(60, 1, 0, false, true, false, 4, 7, traced);\r\n            if ((this.castleStatus & CastleStatus.WhiteKing) && this.board[63] == Piece.Rook_W && traced.length == 2) {\r\n                if (!attackedSquares.includes(60) && !attackedSquares.includes(61) && !attackedSquares.includes(62)) {\r\n                    inArray.push({ from: 60, to: 62, data: 0, score: 0 });\r\n                }\r\n            }\r\n            traced = [];\r\n            this.traceValidSquares(60, -1, 0, false, true, false, 4, 7, traced);\r\n            if ((this.castleStatus & CastleStatus.WhiteQueen) && this.board[56] == Piece.Rook_W && traced.length == 3) {\r\n                if (!attackedSquares.includes(60) && !attackedSquares.includes(59) && !attackedSquares.includes(58)) {\r\n                    inArray.push({ from: 60, to: 58, data: 0, score: 0 });\r\n                }\r\n            }\r\n        } else {\r\n            let traced: number[] = [];\r\n            this.traceValidSquares(4, 1, 0, false, true, false, 4, 0, traced);\r\n            if ((this.castleStatus & CastleStatus.BlackKing) && this.board[7] == Piece.Rook_B && traced.length == 2) {\r\n                if (!attackedSquares.includes(4) && !attackedSquares.includes(5) && !attackedSquares.includes(6)) {\r\n                    inArray.push({ from: 4, to: 6, data: 0, score: 0 });\r\n                }\r\n            }\r\n            traced = [];\r\n            this.traceValidSquares(4, -1, 0, false, true, false, 4, 0, traced);\r\n            if ((this.castleStatus & CastleStatus.BlackQueen) && this.board[0] == Piece.Rook_B && traced.length == 3) {\r\n                if (!attackedSquares.includes(4) && !attackedSquares.includes(3) && !attackedSquares.includes(2)) {\r\n                    inArray.push({ from: 4, to: 2, data: 0, score: 0 });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isInCheck = (white: boolean) => {\r\n        const attacked = this.getAttackedSquares(white, -1);\r\n        return this.isInCheckAttackedSquares(white, attacked);\r\n    }\r\n\r\n    isInCheckAttackedSquares = (white: boolean, attacked: number[]) => {\r\n        return ((white && attacked.includes(this.pieceLocations[Piece.King_W][0])) || (!white && attacked.includes(this.pieceLocations[Piece.King_B][0])));\r\n    }\r\n\r\n    getAllValidMoves = (capturesOnly: boolean = false, baseAttackedSquares: number[] = []) => {\r\n        let allValid: EvalMove[] = [];\r\n        \r\n        if (baseAttackedSquares.length == 0) {\r\n            this.pinnedPieces = [];\r\n            baseAttackedSquares = this.getAttackedSquares(this.whiteTurn, -1, true);\r\n        }\r\n\r\n        if (!capturesOnly)\r\n            this.getValidCastleSquares(baseAttackedSquares, allValid);\r\n\r\n        \r\n        const inCheck = this.isInCheckAttackedSquares(this.whiteTurn, baseAttackedSquares);\r\n\r\n        const startIndex = this.whiteTurn ? 7 : 1;\r\n        const endIndex = this.whiteTurn ? 12 : 6;\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n            const length = this.pieceLocations[i].length;\r\n            for (let j = 0; j < length; j++) {\r\n                const location = this.pieceLocations[i][j];\r\n\r\n                let valid: number[] = [];\r\n                this.getValidSquares(location, i, capturesOnly, false, valid);\r\n\r\n                const isPinned = this.pinnedPieces.includes(location);\r\n                const validLength = valid.length;\r\n                for (let k = 0; k < validLength; k++) {\r\n                    if (capturesOnly && this.board[valid[k]] == Piece.Empty)\r\n                        continue;\r\n\r\n                    if (inCheck || isPinned || i == Piece.King_W || i == Piece.King_B) { // more optimizations here?\r\n                    //if (false) {\r\n                        const pieceBackup = this.board[valid[k]];\r\n                        const backup2 = this.board[location];\r\n                        this.board[valid[k]] = i;\r\n                        this.board[location] = Piece.Empty;\r\n                        const attacked: number[] = this.getAttackedSquares(this.whiteTurn, valid[k]);\r\n                        this.board[valid[k]] = pieceBackup;\r\n                        this.board[location] = backup2;\r\n                        if (i == Piece.King_W || i == Piece.King_B) {\r\n                            if (attacked.includes(valid[k]))\r\n                                continue;\r\n                        }\r\n                        else if (this.isInCheckAttackedSquares(this.whiteTurn, attacked))\r\n                            continue;\r\n                    }\r\n\r\n                    // add more moves to account for promoting to various pieces\r\n                    const y = (valid[k] / this.boardSize) << 0;\r\n                    if (i == Piece.Pawn_W && y == 0) {\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Queen_W, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Rook_W, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Bishop_W, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Knight_W, score: 0 });\r\n                    } else if (i == Piece.Pawn_B && y == 7) {\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Queen_B, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Rook_B, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Bishop_B, score: 0 });\r\n                        allValid.push({ from: location, to: valid[k], data: Piece.Knight_B, score: 0 });\r\n                    } else {\r\n                        allValid.push({ from: location, to: valid[k], data: 0, score: 0 });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return allValid;\r\n    }\r\n\r\n    finishTurn = () => {\r\n        this.whiteTurn = !this.whiteTurn;\r\n        this.historicalBoards.push(this.createHistoricalBoard());\r\n        this.boardHash = this.hashBoard();\r\n        this.boardDelta = [];\r\n        this.allValidMoves = this.getAllValidMoves();\r\n        this.savedEvaluations = {};\r\n\r\n        this.moveCount++;\r\n        this.moveRepCount++;\r\n    }\r\n\r\n    forceMakeMove = (fromIndex: number, move: MoveInfo, finishTurn: boolean) => {\r\n        const toIndex = move.index;\r\n        const movingPiece = this.board[fromIndex];\r\n        const capturedPiece = this.board[toIndex];\r\n\r\n        this.boardDelta.push({ index: toIndex, piece: capturedPiece, target: -1 });\r\n        this.boardDelta.push({ index: fromIndex, piece: movingPiece, target: toIndex });\r\n        this.board[toIndex] = this.board[fromIndex];\r\n        this.board[fromIndex] = Piece.Empty;\r\n\r\n        // promotion check\r\n        let promoted = false;\r\n        const y = (toIndex / this.boardSize) << 0;\r\n        if (this.board[toIndex] == Piece.Pawn_W && y == 0) {\r\n            this.board[toIndex] = move.data;\r\n            this.pieceLocations[Piece.Pawn_W].splice(this.pieceLocations[Piece.Pawn_W].indexOf(fromIndex), 1); // remove pawn entry\r\n            this.pieceLocations[move.data].push(toIndex); // add new piece entry\r\n            this.boardDelta.push({ index: -1, piece: move.data, target: toIndex }); // add promotion delta\r\n            promoted = true;\r\n        }\r\n        else if (this.board[toIndex] == Piece.Pawn_B && y == 7) {\r\n            this.board[toIndex] = move.data;\r\n            this.pieceLocations[Piece.Pawn_B].splice(this.pieceLocations[Piece.Pawn_B].indexOf(fromIndex), 1); // remove pawn entry\r\n            this.pieceLocations[move.data].push(toIndex); // add new piece entry\r\n            this.boardDelta.push({ index: -1, piece: move.data, target: toIndex }); // add promotion delta\r\n            promoted = true;\r\n        }\r\n\r\n        // en passant check\r\n        if (toIndex == this.enPassantSquare) { // capturing en passant, so remove the pawn and add a delta\r\n            if (movingPiece == Piece.Pawn_W) {\r\n                this.boardDelta.push({ index: toIndex + 8, piece: Piece.Pawn_B, target: -1 });\r\n                this.board[toIndex + 8] = Piece.Empty;\r\n            } else if (movingPiece == Piece.Pawn_B) {\r\n                this.boardDelta.push({ index: toIndex - 8, piece: Piece.Pawn_W, target: -1 });\r\n                this.board[toIndex - 8] = Piece.Empty;\r\n            }\r\n        }\r\n\r\n        if (movingPiece == Piece.Pawn_W && fromIndex - toIndex == 16) { // moving two spaces up\r\n            this.enPassantSquare = fromIndex - 8;\r\n            this.boardDelta.push({ index: -1, piece: Piece.Empty, target: -1 });\r\n        }\r\n        else if (movingPiece == Piece.Pawn_B && toIndex - fromIndex == 16) { // moving two spaces down\r\n            this.enPassantSquare = fromIndex + 8;\r\n            this.boardDelta.push({ index: -1, piece: Piece.Empty, target: -1 });\r\n        }\r\n        else {\r\n            this.enPassantSquare = -1;\r\n        }\r\n\r\n        // update moved piece position unless promoted since that is already handled\r\n        if (!promoted) {\r\n            this.pieceLocations[movingPiece].splice(this.pieceLocations[movingPiece].indexOf(fromIndex), 1, toIndex); // update stored position\r\n        }\r\n\r\n        // remove captured piece\r\n        if (capturedPiece != Piece.Empty) {\r\n            this.pieceLocations[capturedPiece].splice(this.pieceLocations[capturedPiece].indexOf(toIndex), 1); // remove entry\r\n        }\r\n\r\n        if (finishTurn) {\r\n            this.finishTurn();\r\n\r\n            // update board repetition history\r\n            if (movingPiece == Piece.Pawn_W || movingPiece == Piece.Pawn_B || capturedPiece != Piece.Empty) { // repetitions not possible with these moves\r\n                this.repetitionHistory = [];\r\n                this.moveRepCount = 0;\r\n            } else {\r\n                this.repetitionHistory.push(this.boardHash);\r\n            }\r\n        }\r\n    }\r\n\r\n    unmakeMove = (deltas: BoardDelta[]) => {\r\n        this.whiteTurn = !this.whiteTurn;\r\n\r\n        for (let i = 0; i < deltas.length; i++) {\r\n            if (deltas[i].piece != Piece.Empty) { // ignore any empty piece entries\r\n                if (deltas[i].index == -1) { // if the original index is -1, it means the piece was created from promotion, so remove the piece\r\n                    this.pieceLocations[deltas[i].piece].splice(this.pieceLocations[deltas[i].piece].indexOf(deltas[i].target), 1); // remove entry\r\n                }\r\n                else if (this.board[deltas[i].index] != Piece.Empty) { // was captured so add the piece back to register\r\n                    this.pieceLocations[deltas[i].piece].push(deltas[i].index);\r\n                } else if (deltas[i].target != -1) { // otherwise just move it back\r\n                    const foundIndex = this.pieceLocations[deltas[i].piece].indexOf(deltas[i].target);\r\n                        if (foundIndex != -1)\r\n                            this.pieceLocations[deltas[i].piece].splice(foundIndex, 1, deltas[i].index); // replace with new location\r\n                        else\r\n                            this.pieceLocations[deltas[i].piece].push(deltas[i].index);\r\n                }\r\n            }\r\n\r\n            if (deltas[i].index != -1)\r\n                this.board[deltas[i].index] = deltas[i].piece;\r\n        }\r\n    }\r\n\r\n    updateCastleStatus = (fromIndex: number, toIndex: number) => {\r\n        const movingPiece = this.board[fromIndex];\r\n        let castled = false;\r\n\r\n        if (movingPiece == Piece.King_W) {\r\n            if ((this.castleStatus & CastleStatus.WhiteKing) && toIndex == 62) {\r\n                this.boardDelta.push({ index: 63, piece: this.board[63], target: 61 });\r\n                this.boardDelta.push({ index: 61, piece: this.board[61], target: -1 });\r\n                this.pieceLocations[Piece.Rook_W].splice(this.pieceLocations[Piece.Rook_W].indexOf(63), 1, 61); // replace with new location\r\n                this.board[63] = Piece.Empty;\r\n                this.board[61] = Piece.Rook_W;\r\n                castled = true;\r\n            } else if ((this.castleStatus & CastleStatus.WhiteQueen) && toIndex == 58) {\r\n                this.boardDelta.push({ index: 56, piece: this.board[56], target: 59 });\r\n                this.boardDelta.push({ index: 59, piece: this.board[59], target: -1 });\r\n                this.pieceLocations[Piece.Rook_W].splice(this.pieceLocations[Piece.Rook_W].indexOf(56), 1, 59); // replace with new location\r\n                this.board[56] = Piece.Empty;\r\n                this.board[59] = Piece.Rook_W;\r\n                castled = true;\r\n            }\r\n\r\n            this.castleStatus &= ~CastleStatus.WhiteKing;\r\n            this.castleStatus &= ~CastleStatus.WhiteQueen;\r\n        }\r\n        else if (movingPiece == Piece.King_B) {\r\n            if ((this.castleStatus & CastleStatus.BlackKing) && toIndex == 6) {\r\n                this.boardDelta.push({ index: 7, piece: this.board[7], target: 5 });\r\n                this.boardDelta.push({ index: 5, piece: this.board[5], target: -1 });\r\n                this.pieceLocations[Piece.Rook_B].splice(this.pieceLocations[Piece.Rook_B].indexOf(7), 1, 5); // replace with new location\r\n                this.board[7] = Piece.Empty;\r\n                this.board[5] = Piece.Rook_B;\r\n                castled = true;\r\n            } else if ((this.castleStatus & CastleStatus.BlackQueen) && toIndex == 2) {\r\n                this.boardDelta.push({ index: 0, piece: this.board[0], target: 3 });\r\n                this.boardDelta.push({ index: 3, piece: this.board[3], target: -1 });\r\n                this.pieceLocations[Piece.Rook_B].splice(this.pieceLocations[Piece.Rook_B].indexOf(0), 1, 3); // replace with new location\r\n                this.board[0] = Piece.Empty;\r\n                this.board[3] = Piece.Rook_B;\r\n                castled = true;\r\n            }\r\n\r\n            this.castleStatus &= ~CastleStatus.BlackKing;\r\n            this.castleStatus &= ~CastleStatus.BlackQueen;\r\n        } // add castling info deltas\r\n        else if (movingPiece == Piece.Rook_W && fromIndex == 56) {\r\n            this.castleStatus &= ~CastleStatus.WhiteQueen;\r\n        }\r\n        else if (movingPiece == Piece.Rook_W && fromIndex == 63) {\r\n            this.castleStatus &= ~CastleStatus.WhiteKing;\r\n        }\r\n        else if (movingPiece == Piece.Rook_B && fromIndex == 0) {\r\n            this.castleStatus &= ~CastleStatus.BlackQueen;\r\n        }\r\n        else if (movingPiece == Piece.Rook_B && fromIndex == 7) {\r\n            this.castleStatus &= ~CastleStatus.BlackKing;\r\n        }\r\n\r\n        return castled;\r\n    }    \r\n\r\n    updateHash = (delta: BoardDelta[], hash: bigint, oldEnPassant: number, oldCastleStatus: number) => {\r\n        let newHash = hash;\r\n\r\n        // positions\r\n        for (let i = 0; i < delta.length; i++) {\r\n            if (delta[i].index != -1) { // -1 entries are usually for tracking, so don't worry about them when updating the hash\r\n                const pos = delta[i].index;\r\n                const piece = delta[i].piece - 1;\r\n                const newPiece = this.board[pos] - 1;\r\n                if (piece >= 0)\r\n                    newHash = newHash ^ this.zobristHashTable[pos][piece];\r\n                if (newPiece >= 0)\r\n                    newHash = newHash ^ this.zobristHashTable[pos][newPiece];\r\n            }\r\n        }\r\n\r\n        // castling\r\n        if ((oldCastleStatus & CastleStatus.WhiteKing) != (this.castleStatus & CastleStatus.WhiteKing)) {\r\n            hash = hash ^ this.zobristHashTable[64][0]; // flip\r\n        }\r\n        if ((oldCastleStatus & CastleStatus.WhiteQueen) != (this.castleStatus & CastleStatus.WhiteQueen)) {\r\n            hash = hash ^ this.zobristHashTable[64][1]; // flip\r\n        }\r\n        if ((oldCastleStatus & CastleStatus.BlackKing) != (this.castleStatus & CastleStatus.BlackKing)) {\r\n            hash = hash ^ this.zobristHashTable[64][2]; // flip\r\n        }\r\n        if ((oldCastleStatus & CastleStatus.BlackQueen) != (this.castleStatus & CastleStatus.BlackQueen)) {\r\n            hash = hash ^ this.zobristHashTable[64][3]; // flip\r\n        }\r\n\r\n        // turn\r\n        newHash = newHash ^ this.zobristHashTable[65][0];\r\n\r\n        // en passant\r\n        if (oldEnPassant != this.enPassantSquare) {\r\n            if (oldEnPassant != -1)\r\n                newHash = newHash ^ this.zobristHashTable[66][oldEnPassant];\r\n            if (this.enPassantSquare != -1)\r\n                newHash = newHash ^ this.zobristHashTable[66][this.enPassantSquare];\r\n        }\r\n\r\n        return newHash;\r\n    }\r\n\r\n    getPieceCount = () => {\r\n        let pieceCount = 0;\r\n        for (let i = 1; i < this.pieceLocations.length; i++) {\r\n            pieceCount += this.pieceLocations[i].length;\r\n        }\r\n        return pieceCount;\r\n    }\r\n\r\n    checkForDraw = () => {\r\n        if (this.moveRepCount >= 50) {\r\n            //console.log(\"Draw by 50 rep\")\r\n            return true;\r\n        }\r\n\r\n        if (!this.whiteTurn) // white's last move cannot be a draw\r\n            return false;\r\n\r\n        if (this.getPieceCount() == 2) // only the kings are left\r\n            return true;\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < this.repetitionHistory.length; i++) {\r\n            if (this.repetitionHistory[i] == this.boardHash)\r\n                count++;\r\n            if (count == 3) {\r\n                //console.log(\"Draw by 3 rep\")\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    readSquareTableValue = (index: number, table: number[], white: boolean) => {\r\n        if (!white)\r\n            index = 63 - index;\r\n        return table[index];\r\n    }\r\n\r\n    evaluateSquareTable = (piece: number, table: number[], white: boolean) => {\r\n        let value = 0;\r\n        if (piece == Piece.Empty)\r\n            return 0;\r\n\r\n        const positions = this.pieceLocations[piece];\r\n        const length = positions.length;\r\n        for (let i = 0; i < length; i++) {\r\n            value += this.readSquareTableValue(positions[i], table, white);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    evaluateSquareTables = (white: boolean, endgameWeight: number) => {\r\n        let value = 0;\r\n\r\n        // ugly\r\n        if (white) {\r\n            value += this.evaluateSquareTable(Piece.Pawn_W, pawnSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Rook_W, rookSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Knight_W, knightSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Bishop_W, bishopSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Queen_W, queenSquareTable, white);\r\n            let kingMiddlegameValue = this.evaluateSquareTable(Piece.King_W, kingMiddleGameSquareTable, white);\r\n            value += (kingMiddlegameValue * (1 - endgameWeight)) << 0;\r\n        } else {\r\n            value += this.evaluateSquareTable(Piece.Pawn_B, pawnSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Rook_B, rookSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Knight_B, knightSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Bishop_B, bishopSquareTable, white);\r\n            value += this.evaluateSquareTable(Piece.Queen_B, queenSquareTable, white);\r\n            let kingMiddlegameValue = this.evaluateSquareTable(Piece.King_B, kingMiddleGameSquareTable, white);\r\n            value += (kingMiddlegameValue * (1 - endgameWeight)) << 0;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    evaluateEndgamePosition = (endgameWeight: number, opponentKingX: number, opponentKingY: number, distance: number) => {\r\n        let score = 0;\r\n\r\n        // try to push the enemy king into the corner\r\n        const distToCenter = Math.abs(opponentKingX - 4) + Math.abs(opponentKingY - 4);\r\n        score += distToCenter;\r\n\r\n        // try and move kings together\r\n        score += 14 - distance;\r\n\r\n        return (score * 20 * endgameWeight) << 0;\r\n    }\r\n\r\n    evaluatePawnStructure = (white: boolean) => {\r\n        let score = 0;\r\n        let pawnList = this.pieceLocations[white ? Piece.Pawn_W : Piece.Pawn_B];\r\n        const length = pawnList.length;\r\n        for (let i = 0; i < length; i++) {\r\n            if ((white && this.board[pawnList[i] + 8] == Piece.Pawn_W) || (!white && this.board[pawnList[i] - 8] == Piece.Pawn_B)) // check for doubled pawns\r\n                score -= 2;\r\n            const protectedLeft = (white && this.board[pawnList[i] + 7] == Piece.Pawn_W) || (!white && this.board[pawnList[i] - 7] != Piece.Pawn_B);\r\n            const protectedRight = (white && this.board[pawnList[i] + 9] == Piece.Pawn_W) || (!white && this.board[pawnList[i] - 9] != Piece.Pawn_B);\r\n            if (!protectedLeft && !protectedRight) // isolate\r\n                score -= 2;\r\n            else if (protectedRight || protectedLeft)\r\n                score += 2;\r\n        }\r\n        return score * 10;\r\n    }\r\n\r\n    evaluate = () => {\r\n        const materialWeight = 1;\r\n        const developmentWeight = 1;\r\n\r\n        const whiteMaterial = this.countMaterial(true);\r\n        const blackMaterial = this.countMaterial(false);\r\n        const whiteMaterialWithoutPawns = whiteMaterial - (this.pieceLocations[Piece.Pawn_W].length * this.getPieceValue(Piece.Pawn_W)); \r\n        const blackMaterialWithoutPawns = blackMaterial - (this.pieceLocations[Piece.Pawn_B].length * this.getPieceValue(Piece.Pawn_B)); \r\n\r\n        const whiteEndgameWeight = 1 - Math.min(1, whiteMaterialWithoutPawns / this.endgameMaterialThreshold);\r\n        const blackEndgameWeight = 1 - Math.min(1, blackMaterialWithoutPawns / this.endgameMaterialThreshold);\r\n\r\n        let whiteEval = whiteMaterial * materialWeight;\r\n        let blackEval = blackMaterial * materialWeight;\r\n        \r\n        whiteEval += (this.evaluateSquareTables(true, whiteEndgameWeight) * developmentWeight) << 0;\r\n        blackEval += (this.evaluateSquareTables(false, blackEndgameWeight) * developmentWeight) << 0;\r\n\r\n        const whiteX = this.pieceLocations[Piece.King_W][0] % this.boardSize;\r\n        const whiteY = (this.pieceLocations[Piece.King_W][0] / this.boardSize) << 0;\r\n        const blackX = this.pieceLocations[Piece.King_B][0] % this.boardSize;\r\n        const blackY = (this.pieceLocations[Piece.King_B][0] / this.boardSize) << 0;\r\n        const distanceBetween = Math.abs(whiteX - blackX) + Math.abs(whiteY - blackY);\r\n        whiteEval += this.evaluateEndgamePosition(whiteEndgameWeight, blackX, blackY, distanceBetween);\r\n        blackEval += this.evaluateEndgamePosition(blackEndgameWeight, whiteX, whiteY, distanceBetween);\r\n\r\n        //whiteEval += this.evaluatePawnStructure(true);\r\n        //blackEval += this.evaluatePawnStructure(false);\r\n\r\n        let evaluation = whiteEval - blackEval;\r\n        if (!this.whiteTurn)\r\n            evaluation *= -1;\r\n\r\n        return evaluation;\r\n    }\r\n\r\n    getPieceValue = (piece: number) => {\r\n        switch (piece) {\r\n            case Piece.Pawn_W:\r\n            case Piece.Pawn_B:\r\n                return Value.Pawn;\r\n            case Piece.Knight_W:\r\n            case Piece.Knight_B:\r\n                return Value.Knight;\r\n            case Piece.Bishop_W:\r\n            case Piece.Bishop_B:\r\n                return Value.Bishop;\r\n            case Piece.Rook_W:\r\n            case Piece.Rook_B:\r\n                return Value.Rook;\r\n            case Piece.Queen_W:\r\n            case Piece.Queen_B:\r\n                return Value.Queen;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    countMaterial = (white: boolean) => {\r\n        let value: number = 0;\r\n\r\n        const startIndex = white ? 8 : 2;\r\n        const endIndex = white ? 12 : 6;\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n            value += this.getPieceValue(i) * this.pieceLocations[i].length;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    predictAndOrderMoves = (moves: EvalMove[], attackedSquares: number[], storedMove: EvalMove | undefined) => {\r\n        const movesLength = moves.length;\r\n\r\n        for (let i = 0; i < movesLength; i++) {\r\n            let score = 0;\r\n            const movingPiece = this.board[moves[i].from];\r\n            const capturingPiece = this.board[moves[i].to];\r\n            const promoting = moves[i].data;\r\n\r\n            if (storedMove != undefined && storedMove.to == moves[i].to && storedMove.from == moves[i].from && storedMove.data == moves[i].data) {\r\n                moves[i].score = 10000;\r\n                continue;\r\n            }\r\n\r\n            if (capturingPiece != Piece.Empty) {\r\n                score += 10 * this.getPieceValue(capturingPiece) - this.getPieceValue(movingPiece); // apply a higher score for lower val piece capturing higher val\r\n            }\r\n\r\n            // deprioritize moving into attacked squares\r\n            if (attackedSquares.includes(moves[i].to)) {\r\n                score -= this.getPieceValue(movingPiece);\r\n            }\r\n\r\n            // score promotion moves\r\n            if (movingPiece == Piece.Pawn_W || movingPiece == Piece.Pawn_B) {\r\n                switch (promoting) {\r\n                    case Piece.Knight_W:\r\n                    case Piece.Knight_B:\r\n                        score += this.getPieceValue(Piece.Knight_W);\r\n                        break;\r\n                    case Piece.Bishop_W:\r\n                    case Piece.Bishop_B:\r\n                        score += this.getPieceValue(Piece.Bishop_W);\r\n                        break;\r\n                    case Piece.Queen_W:\r\n                    case Piece.Queen_B:\r\n                        score += this.getPieceValue(Piece.Queen_W);\r\n                        break;\r\n                    case Piece.Rook_W:\r\n                    case Piece.Rook_B:\r\n                        score += this.getPieceValue(Piece.Rook_W);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            moves[i].score = score;\r\n        }\r\n\r\n        moves.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n    }\r\n\r\n    findBestMoveWithIterativeDeepening = () => {\r\n        this.searchStartTime = Date.now();\r\n        const maxDepth = 30;\r\n        let lastCompletedDepth = 0;\r\n\r\n        for (let i = 3; i <= maxDepth; i++) {\r\n            const iterationStartTime = self.performance.now();\r\n            this.findBestMove(true, i, 0, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n            const iterationEndTime = self.performance.now();\r\n\r\n            if (Date.now() - this.searchStartTime >= this.searchMaxTime) // search aborted so dont update move\r\n                break;\r\n\r\n            //console.log(`Finished iteration ${i} in ${(iterationEndTime - iterationStartTime) << 0}ms`);\r\n\r\n            lastCompletedDepth = i;\r\n            this.movesFoundThisTurn = this.movesFoundThisIteration;\r\n            this.movesFoundThisIteration = [];\r\n            this.evalBestMove = this.evalBestMoveThisIteration;\r\n            ctx.postMessage({ command: EvalCommands.ReceiveCurrentEval, eval: this.whiteTurn ? this.evalBestMove.score : -1 * this.evalBestMove.score });\r\n\r\n            if (this.evalBestMoveThisIteration.score > 99999999) // mate\r\n                break;\r\n        }\r\n        \r\n        this.depthSearchedThisTurn = lastCompletedDepth;\r\n    }\r\n\r\n    // lower bound: alpha, upper bound: beta\r\n    findBestMove = (canCancel: boolean, depth: number, offset: number, alpha: number, beta: number) => {\r\n        if (canCancel && Date.now() - this.searchStartTime >= this.searchMaxTime) // abort search\r\n            return 0;\r\n\r\n        if (depth <= 0)\r\n            return this.quiescenceSearch(alpha, beta);\r\n\r\n        if (offset > 0) {\r\n            // detect any repetition and assume a draw is coming (return a 0 draw score)\r\n            if (this.repetitionHistory.includes(this.boardHash))\r\n                return 0;\r\n        }\r\n\r\n        // modify the values to skip this position if a mating sequence has already been found and is shorter\r\n        alpha = Math.max(alpha, Number.MIN_SAFE_INTEGER + offset);\r\n        beta = Math.min(beta, Number.MAX_SAFE_INTEGER - offset);\r\n        if (alpha >= beta) {\r\n            return alpha;\r\n        }\r\n\r\n        const hashString = this.boardHash.toString();\r\n        let storedMove: EvalMove | undefined = undefined;\r\n        if (hashString in this.savedEvaluations) {\r\n            const savedEval = this.savedEvaluations[hashString];\r\n            storedMove = savedEval.bestMove;\r\n            let finalScore = savedEval.eval;\r\n            let shouldReturn = false;\r\n            if (savedEval.depth >= depth) {\r\n                if (savedEval.type == SavedEvalTypes.Exact) // exact eval was saved so just return it\r\n                    shouldReturn = true;\r\n                else if (savedEval.type == SavedEvalTypes.Alpha && finalScore <= alpha) // if we are storing the lower bound, only search if it is greater than the current lower bound\r\n                    shouldReturn = true;\r\n                else if (savedEval.type == SavedEvalTypes.Beta && finalScore >= beta) // if we are storing the upper bound, only search if it is less than the current upper bound\r\n                    shouldReturn = true;\r\n            }\r\n            if (shouldReturn) {\r\n                if (offset == 0) {\r\n                    this.evalBestMoveThisIteration = this.savedEvaluations[hashString].bestMove;\r\n                    this.evalBestMoveThisIteration.score = this.savedEvaluations[hashString].eval;\r\n                }\r\n                return finalScore;\r\n            }\r\n        }\r\n\r\n        this.pinnedPieces = [];\r\n        const attackedSquares = this.getAttackedSquares(this.whiteTurn, -1, true);\r\n        const validMoves = this.getAllValidMoves(false, attackedSquares);\r\n        const inCheck = this.isInCheckAttackedSquares(this.whiteTurn, attackedSquares);\r\n        \r\n        if (validMoves.length == 0) { // either checkmate or stalemate\r\n            if (inCheck)\r\n                return Number.MIN_SAFE_INTEGER + offset; // checkmate, worst possible move\r\n            else\r\n                return 0; // stalemate, draw\r\n        }\r\n        this.predictAndOrderMoves(validMoves, attackedSquares, storedMove);\r\n\r\n        const startingHash = this.boardHash;\r\n        const oldEnPassant = this.enPassantSquare;\r\n        const oldCastleStatus = this.castleStatus;\r\n        let bestMoveForThisPosition: EvalMove = { from: -1, to: -1, data: 0, score: 0 };\r\n        let savingType = SavedEvalTypes.Alpha;\r\n        const length = validMoves.length;\r\n        for (let i = 0; i < length; i++) {\r\n            // make the move (todo: move to function)\r\n            this.updateCastleStatus(validMoves[i].from, validMoves[i].to);\r\n            this.forceMakeMove(validMoves[i].from, { index: validMoves[i].to, data: validMoves[i].data }, false);\r\n            const deltas = this.boardDelta;\r\n            this.boardDelta = [];\r\n            this.whiteTurn = !this.whiteTurn;\r\n            this.boardHash = this.updateHash(deltas, startingHash, oldEnPassant, oldCastleStatus);\r\n\r\n            // calculate evaluation (one player's upper bound is the other's lower bound)\r\n            // let evaluation: number = -1 * this.findBestMove(canCancel, depth - 1, offset + 1, -alpha - 1, -alpha);\r\n            // if (evaluation > alpha && evaluation < beta)\r\n            //     evaluation = -1 * this.findBestMove(canCancel, depth - 1, offset + 1, -beta, -alpha);\r\n\r\n            let evaluation: number = -1 * this.findBestMove(canCancel, depth - 1, offset + 1, -beta, -alpha);\r\n\r\n            // unmake the move\r\n            this.unmakeMove(deltas);\r\n            this.boardHash = startingHash;\r\n            this.enPassantSquare = oldEnPassant;\r\n            this.castleStatus = oldCastleStatus;\r\n\r\n            // calc alpha & beta\r\n            if (evaluation >= beta) {\r\n                this.savedEvaluations[hashString] = { totalMoves: 0, depth: depth, bestMove: bestMoveForThisPosition, type: SavedEvalTypes.Beta, eval: beta };\r\n                return beta;\r\n            }\r\n            if (evaluation > alpha) { // best move found\r\n                bestMoveForThisPosition = validMoves[i];\r\n                alpha = evaluation;\r\n                savingType = SavedEvalTypes.Exact;\r\n\r\n                if (offset == 0) {\r\n                    this.evalBestMoveThisIteration = bestMoveForThisPosition;\r\n                    this.evalBestMoveThisIteration.score = evaluation;\r\n                    this.movesFoundThisIteration.push({\r\n                        move: this.evalBestMoveThisIteration,\r\n                        piece: this.board[bestMoveForThisPosition.from],\r\n                        capture: this.board[bestMoveForThisPosition.to] != Piece.Empty,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this.savedEvaluations[hashString] = { totalMoves: 0, depth: depth, bestMove: bestMoveForThisPosition, type: savingType, eval: alpha };\r\n        return alpha;\r\n    }\r\n\r\n    // search until the position is 'quiet' (no captures remaining)\r\n    quiescenceSearch(alpha: number, beta: number) {\r\n        let evaluation: number = this.evaluate(); // evaluate first to prevent forcing a bad capture when there may have been better non capture moves\r\n        if (evaluation >= beta)\r\n            return beta;\r\n        if (evaluation > alpha)\r\n            alpha = evaluation;\r\n\r\n        this.pinnedPieces = [];\r\n        const attackedSquares = this.getAttackedSquares(this.whiteTurn, -1, true);\r\n        const validMoves = this.getAllValidMoves(true, attackedSquares);\r\n        this.predictAndOrderMoves(validMoves, attackedSquares, undefined);\r\n\r\n        const oldEnPassant = this.enPassantSquare;\r\n        const length = validMoves.length;\r\n        for (let i = 0; i < length; i++) {\r\n            // make the move (todo: move to function)\r\n            // dont update hash because it isn't relevant here\r\n            this.forceMakeMove(validMoves[i].from, { index: validMoves[i].to, data: validMoves[i].data }, false);\r\n            const deltas = this.boardDelta;\r\n            this.boardDelta = [];\r\n            this.whiteTurn = !this.whiteTurn;\r\n\r\n            // evaluation = -1 * this.quiescenceSearch(-alpha - 1, -alpha);\r\n            // if (evaluation > alpha && evaluation < beta)\r\n            //     evaluation = -1 * this.quiescenceSearch(-beta, -alpha);\r\n\r\n            evaluation = -1 * this.quiescenceSearch(-beta, -alpha);\r\n\r\n            // unmake the move\r\n            this.unmakeMove(deltas);\r\n            this.enPassantSquare = oldEnPassant;\r\n\r\n            if (evaluation >= beta)\r\n                return beta;\r\n            if (evaluation > alpha)\r\n                alpha = evaluation;\r\n        }\r\n\r\n        return alpha;\r\n    }\r\n\r\n    calculateAllPossibleMoves = (depth: number) => {\r\n        if (depth <= 0)\r\n            return 1;\r\n\r\n        const hashString = this.boardHash.toString();\r\n        if (hashString in this.savedEvaluations && this.savedEvaluations[hashString].depth == depth)\r\n            return this.savedEvaluations[hashString].totalMoves;\r\n\r\n        const validMoves = this.getAllValidMoves();\r\n        let totalMoves = 0;\r\n\r\n        const startingHash = this.boardHash;\r\n        const oldEnPassant = this.enPassantSquare;\r\n        const oldCastleStatus = this.castleStatus;\r\n        const validLength = validMoves.length;\r\n        for (let i = 0; i < validLength; i++) { \r\n            this.updateCastleStatus(validMoves[i].from, validMoves[i].to);\r\n            this.forceMakeMove(validMoves[i].from, { index: validMoves[i].to, data: validMoves[i].data }, false);\r\n            const deltas = this.boardDelta;\r\n            this.boardDelta = [];\r\n            this.whiteTurn = !this.whiteTurn;\r\n            this.boardHash = this.updateHash(deltas, startingHash, oldEnPassant, oldCastleStatus);\r\n\r\n            totalMoves += this.calculateAllPossibleMoves(depth - 1);\r\n\r\n            this.unmakeMove(deltas);\r\n            this.boardHash = startingHash;\r\n            this.enPassantSquare = oldEnPassant;\r\n            this.castleStatus = oldCastleStatus;\r\n        }\r\n\r\n        this.savedEvaluations[hashString] = { totalMoves: totalMoves, depth: depth, eval: 0, type: SavedEvalTypes.Exact, bestMove: { from: -1, to: -1, data: 0, score: 0 } };\r\n        return totalMoves;\r\n    }\r\n\r\n    randomBotMove = () => {\r\n        if (this.historicalIndex != 0)\r\n            return;\r\n\r\n        const moveIndex = (Math.random() * this.allValidMoves.length) << 0;\r\n        const move = this.allValidMoves[moveIndex];\r\n\r\n        this.updateCastleStatus(move.from, move.to);\r\n        this.forceMakeMove(move.from, { index: move.to, data: move.data }, true);\r\n    }\r\n\r\n    evalBotMove = (depth: number) => {\r\n        if (this.historicalIndex != 0)\r\n            return;\r\n\r\n        if (this.checkForDraw())\r\n            return;\r\n\r\n        const startTime = self.performance.now();\r\n        const lastMove = this.evalBestMove;\r\n\r\n        this.movesFoundThisIteration = [];\r\n        this.movesFoundThisTurn = [];\r\n        this.evalBestMove = {} as EvalMove;\r\n        \r\n        this.findBestMove(false, depth, 0, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n        if (lastMove.to == this.evalBestMoveThisIteration.to && lastMove.from == this.evalBestMoveThisIteration.from) {\r\n            console.log(\"Attempting to make the same move: \" + lastMove.toString());\r\n            return;\r\n        } else {\r\n            this.evalBestMove = this.evalBestMoveThisIteration;\r\n        }\r\n\r\n        this.movesFoundThisTurn = this.movesFoundThisIteration;\r\n        this.depthSearchedThisTurn = depth;\r\n        this.castledThisTurn = this.updateCastleStatus(this.evalBestMove.from, this.evalBestMove.to);\r\n        this.pieceCapturedThisTurn = this.board[this.evalBestMove.to] != Piece.Empty;\r\n        this.forceMakeMove(this.evalBestMove.from, { index: this.evalBestMove.to, data: this.evalBestMove.data }, true);\r\n\r\n        const endTime = self.performance.now();\r\n        this.timeTakenLastTurn = endTime - startTime; // ms\r\n    }\r\n\r\n    evalBotMoveIterative = () => {\r\n        if (this.historicalIndex != 0)\r\n            return;\r\n\r\n        if (this.checkForDraw())\r\n            return;\r\n\r\n        const startTime = self.performance.now();\r\n        const lastMove = this.evalBestMove;\r\n\r\n        this.movesFoundThisIteration = [];\r\n        this.movesFoundThisTurn = [];\r\n        this.evalBestMove = {} as EvalMove;\r\n\r\n        engine.findBestMoveWithIterativeDeepening();\r\n        if (lastMove.to == this.evalBestMove.to && lastMove.from == this.evalBestMove.from) {\r\n            console.log(\"Attempting to make the same move: \" + lastMove.toString());\r\n            return;\r\n        }\r\n\r\n        this.castledThisTurn = this.updateCastleStatus(this.evalBestMove.from, this.evalBestMove.to);\r\n        this.pieceCapturedThisTurn = this.board[this.evalBestMove.to] != Piece.Empty;\r\n        this.forceMakeMove(this.evalBestMove.from, { index: this.evalBestMove.to, data: this.evalBestMove.data }, true);\r\n\r\n        const endTime = self.performance.now();\r\n        this.timeTakenLastTurn = endTime - startTime; // ms\r\n    }\r\n\r\n    attemptMove = (fromIndex: number, toIndex: number) => {\r\n        const movingPiece = this.board[fromIndex];\r\n\r\n        // do not allow moves when looking back\r\n        if (this.historicalIndex != 0)\r\n            return false;\r\n\r\n        if (this.checkForDraw())\r\n            return false;\r\n\r\n        // no-op moves\r\n        if (fromIndex == toIndex || movingPiece == Piece.Empty)\r\n            return false;\r\n\r\n        // only move correct color pieces on correct turn\r\n        if ((this.whiteTurn && movingPiece < Piece.King_W) || (!this.whiteTurn && movingPiece > Piece.Pawn_B))\r\n            return false;\r\n\r\n        const validMoves = this.getAllValidMoves();\r\n        if (!validMoves.some(e => e.from == fromIndex && e.to == toIndex))\r\n            return false;\r\n\r\n        this.castledThisTurn = this.updateCastleStatus(fromIndex, toIndex);\r\n        this.pieceCapturedThisTurn = this.board[toIndex] != Piece.Empty; // todo: en passant capture noise doesn't work with this\r\n        this.forceMakeMove(fromIndex, { index: toIndex, data: this.whiteTurn ? Piece.Queen_W : Piece.Queen_B }, true); // auto promote to queen when possible\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nconst engine = new Engine();\r\n\r\nctx.addEventListener(\"message\", (e) => {\r\n    switch (e.data.command) {\r\n        case EngineCommands.RetrieveBoard:\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                board: engine.board,\r\n                validMoves: engine.allValidMoves\r\n            });\r\n            break;\r\n        case EngineCommands.AttemptMove:\r\n        {\r\n            const result = engine.attemptMove(e.data.fromIndex, e.data.toIndex);\r\n            const inCheck = result ? engine.isInCheck(engine.whiteTurn) : false;\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                from: e.data.fromIndex,\r\n                to: e.data.toIndex,\r\n                whiteTurn: engine.whiteTurn,\r\n                board: result ? engine.historicalBoards[engine.historicalBoards.length - 1] : undefined,\r\n                validMoves: engine.allValidMoves,\r\n                inCheck: inCheck,\r\n                captured: engine.pieceCapturedThisTurn,\r\n                castled: engine.castledThisTurn,\r\n                draw: engine.checkForDraw()\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.HistoryGoBack:\r\n        {\r\n            engine.stepBack();\r\n            const index = engine.historicalBoards.length - 1 + engine.historicalIndex;\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                board: engine.historicalBoards[index],\r\n                index: index\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.HistoryGoForward:\r\n        {\r\n            engine.stepForward();\r\n            const index = engine.historicalBoards.length - 1 + engine.historicalIndex;\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                board: engine.historicalBoards[index],\r\n                index: index\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.UndoMove:\r\n        {\r\n            if (engine.historicalIndex == 0) {\r\n                engine.undoMove();\r\n                const index = engine.historicalBoards.length - 1;\r\n                ctx.postMessage({\r\n                    command: e.data.command,\r\n                    board: engine.historicalBoards[index],\r\n                    index: index\r\n                });\r\n            }\r\n            break;\r\n        }\r\n        case EngineCommands.BotBestMove:\r\n        {\r\n            engine.evalBotMove(6);\r\n            const inCheck = engine.isInCheck(engine.whiteTurn);\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                from: engine.evalBestMove.from,\r\n                to: engine.evalBestMove.to,\r\n                timeTaken: engine.timeTakenLastTurn,\r\n                depthSearched: engine.depthSearchedThisTurn,\r\n                movesFound: engine.movesFoundThisTurn,\r\n                whiteTurn: engine.whiteTurn,\r\n                board: engine.historicalBoards[engine.historicalBoards.length - 1],\r\n                validMoves: engine.allValidMoves,\r\n                inCheck: inCheck,\r\n                captured: engine.pieceCapturedThisTurn,\r\n                castled: engine.castledThisTurn,\r\n                draw: engine.checkForDraw()\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.BotBestMoveIterative:\r\n        {\r\n            engine.evalBotMoveIterative();\r\n            //console.log(engine.calculateAllPossibleMoves(6));\r\n            const inCheck = engine.isInCheck(engine.whiteTurn);\r\n            ctx.postMessage({\r\n                command: e.data.command,\r\n                from: engine.evalBestMove.from,\r\n                to: engine.evalBestMove.to,\r\n                timeTaken: engine.timeTakenLastTurn,\r\n                depthSearched: engine.depthSearchedThisTurn,\r\n                movesFound: engine.movesFoundThisTurn,\r\n                whiteTurn: engine.whiteTurn,\r\n                board: engine.historicalBoards[engine.historicalBoards.length - 1],\r\n                validMoves: engine.allValidMoves,\r\n                inCheck: inCheck,\r\n                captured: engine.pieceCapturedThisTurn,\r\n                castled: engine.castledThisTurn,\r\n                draw: engine.checkForDraw()\r\n            });\r\n            break;\r\n        }\r\n        case EngineCommands.RetrievePieceLocations:\r\n            ctx.postMessage({ command: e.data.command, locations: engine.pieceLocations });\r\n            break;\r\n        case EngineCommands.UpdateMaxMoveTime:\r\n            engine.searchMaxTime = e.data.time;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(212);\n"],"sourceRoot":""}